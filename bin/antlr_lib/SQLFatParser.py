# Generated from SQLFat.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008b")
        buf.write("\u04d0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\3\2\3\2\5\2\u00a3\n\2\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u00ac\n\3\3\4\3\4\3\4\3\4\5\4\u00b2")
        buf.write("\n\4\3\5\3\5\3\5\3\5\6\5\u00b8\n\5\r\5\16\5\u00b9\3\5")
        buf.write("\3\5\5\5\u00be\n\5\3\5\3\5\5\5\u00c2\n\5\5\5\u00c4\n\5")
        buf.write("\3\5\5\5\u00c7\n\5\3\5\5\5\u00ca\n\5\3\5\3\5\6\5\u00ce")
        buf.write("\n\5\r\5\16\5\u00cf\3\5\3\5\5\5\u00d4\n\5\3\5\5\5\u00d7")
        buf.write("\n\5\3\5\5\5\u00da\n\5\3\5\5\5\u00dd\n\5\5\5\u00df\n\5")
        buf.write("\3\6\3\6\7\6\u00e3\n\6\f\6\16\6\u00e6\13\6\3\6\3\6\5\6")
        buf.write("\u00ea\n\6\3\6\5\6\u00ed\n\6\3\6\5\6\u00f0\n\6\3\6\3\6")
        buf.write("\7\6\u00f4\n\6\f\6\16\6\u00f7\13\6\3\6\3\6\5\6\u00fb\n")
        buf.write("\6\3\6\5\6\u00fe\n\6\3\6\5\6\u0101\n\6\5\6\u0103\n\6\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010d\n\7\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\5\b\u0117\n\b\3\t\3\t\7\t\u011b")
        buf.write("\n\t\f\t\16\t\u011e\13\t\3\t\3\t\5\t\u0122\n\t\3\t\5\t")
        buf.write("\u0125\n\t\3\t\5\t\u0128\n\t\3\n\3\n\5\n\u012c\n\n\3\n")
        buf.write("\3\n\5\n\u0130\n\n\3\13\3\13\5\13\u0134\n\13\3\13\3\13")
        buf.write("\3\f\3\f\3\r\3\r\5\r\u013c\n\r\3\r\3\r\7\r\u0140\n\r\f")
        buf.write("\r\16\r\u0143\13\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u014b\n\16\3\16\5\16\u014e\n\16\3\16\3\16\5\16\u0152")
        buf.write("\n\16\3\16\5\16\u0155\n\16\3\16\3\16\5\16\u0159\n\16\3")
        buf.write("\16\5\16\u015c\n\16\5\16\u015e\n\16\3\17\3\17\5\17\u0162")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u016a\n\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\7\17\u0171\n\17\f\17\16\17\u0174")
        buf.write("\13\17\5\17\u0176\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\7\17\u017f\n\17\f\17\16\17\u0182\13\17\5\17\u0184")
        buf.write("\n\17\3\20\3\20\3\20\5\20\u0189\n\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0195\n\20\3\20")
        buf.write("\3\20\6\20\u0199\n\20\r\20\16\20\u019a\5\20\u019d\n\20")
        buf.write("\3\20\3\20\6\20\u01a1\n\20\r\20\16\20\u01a2\5\20\u01a5")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u01ab\n\20\3\20\3\20\3")
        buf.write("\20\3\20\7\20\u01b1\n\20\f\20\16\20\u01b4\13\20\3\20\3")
        buf.write("\20\5\20\u01b8\n\20\3\20\3\20\3\20\3\20\7\20\u01be\n\20")
        buf.write("\f\20\16\20\u01c1\13\20\5\20\u01c3\n\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u01cf\n\21\f")
        buf.write("\21\16\21\u01d2\13\21\5\21\u01d4\n\21\3\22\3\22\3\22\3")
        buf.write("\22\5\22\u01da\n\22\3\23\3\23\5\23\u01de\n\23\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u01e8\n\24\3\24\3")
        buf.write("\24\5\24\u01ec\n\24\3\24\5\24\u01ef\n\24\3\24\3\24\5\24")
        buf.write("\u01f3\n\24\3\25\3\25\3\25\3\25\5\25\u01f9\n\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u01ff\n\25\7\25\u0201\n\25\f\25\16")
        buf.write("\25\u0204\13\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u020d\n\25\3\25\3\25\3\25\3\25\5\25\u0213\n\25\7\25\u0215")
        buf.write("\n\25\f\25\16\25\u0218\13\25\3\25\3\25\3\25\5\25\u021d")
        buf.write("\n\25\3\25\3\25\5\25\u0221\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\5\26\u022c\n\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u0234\n\27\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u023a\n\30\3\30\3\30\3\30\3\30\3\30\7\30\u0241\n\30")
        buf.write("\f\30\16\30\u0244\13\30\5\30\u0246\n\30\3\30\3\30\5\30")
        buf.write("\u024a\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u0251\n\31\f")
        buf.write("\31\16\31\u0254\13\31\3\32\3\32\5\32\u0258\n\32\3\33\3")
        buf.write("\33\3\33\3\34\3\34\5\34\u025f\n\34\3\35\3\35\3\35\7\35")
        buf.write("\u0264\n\35\f\35\16\35\u0267\13\35\3\36\3\36\7\36\u026b")
        buf.write("\n\36\f\36\16\36\u026e\13\36\3\36\3\36\3\36\7\36\u0273")
        buf.write("\n\36\f\36\16\36\u0276\13\36\3\36\3\36\5\36\u027a\n\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0282\n\37\3\37\5")
        buf.write("\37\u0285\n\37\3\37\5\37\u0288\n\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\5\37\u028f\n\37\3\37\5\37\u0292\n\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\5\37\u029a\n\37\3 \5 \u029d\n \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \5 \u02a8\n \3 \3 \5 \u02ac\n \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \5 \u02b7\n \3 \3 \3 \5 \u02bc")
        buf.write("\n \5 \u02be\n \3 \3 \5 \u02c2\n \3!\3!\3!\5!\u02c7\n")
        buf.write("!\3!\3!\3\"\3\"\3\"\5\"\u02ce\n\"\3\"\3\"\3#\3#\3#\3#")
        buf.write("\3$\3$\3$\3%\3%\3%\5%\u02dc\n%\3%\3%\3%\3%\3%\3%\3%\5")
        buf.write("%\u02e5\n%\3%\3%\5%\u02e9\n%\3%\5%\u02ec\n%\3%\5%\u02ef")
        buf.write("\n%\3%\3%\3%\3%\3%\5%\u02f6\n%\3%\3%\3%\5%\u02fb\n%\5")
        buf.write("%\u02fd\n%\3&\3&\3&\5&\u0302\n&\3&\3&\3\'\3\'\3\'\7\'")
        buf.write("\u0309\n\'\f\'\16\'\u030c\13\'\3(\3(\5(\u0310\n(\3(\3")
        buf.write("(\3)\3)\3)\3)\7)\u0318\n)\f)\16)\u031b\13)\3)\3)\3*\3")
        buf.write("*\3*\3*\3*\5*\u0324\n*\3+\3+\7+\u0328\n+\f+\16+\u032b")
        buf.write("\13+\3,\3,\5,\u032f\n,\3,\3,\3,\5,\u0334\n,\5,\u0336\n")
        buf.write(",\3-\3-\5-\u033a\n-\3-\5-\u033d\n-\3-\3-\7-\u0341\n-\f")
        buf.write("-\16-\u0344\13-\3.\3.\3.\3/\3/\3/\3/\7/\u034d\n/\f/\16")
        buf.write("/\u0350\13/\3/\3/\3\60\3\60\3\60\3\60\3\60\5\60\u0359")
        buf.write("\n\60\3\60\5\60\u035c\n\60\3\61\3\61\3\61\3\61\3\61\5")
        buf.write("\61\u0363\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\5\62\u0384\n\62\5\62\u0386\n\62\3\63\3\63\5\63\u038a")
        buf.write("\n\63\5\63\u038c\n\63\3\63\3\63\3\63\5\63\u0391\n\63\3")
        buf.write("\63\3\63\7\63\u0395\n\63\f\63\16\63\u0398\13\63\3\63\3")
        buf.write("\63\5\63\u039c\n\63\5\63\u039e\n\63\3\63\3\63\5\63\u03a2")
        buf.write("\n\63\3\63\5\63\u03a5\n\63\3\63\5\63\u03a8\n\63\3\63\3")
        buf.write("\63\7\63\u03ac\n\63\f\63\16\63\u03af\13\63\5\63\u03b1")
        buf.write("\n\63\3\64\3\64\5\64\u03b5\n\64\3\64\3\64\3\64\5\64\u03ba")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\66\3\66\3\66\5\66\u03c9\n\66\3\66\3\66\3\67\3\67\3")
        buf.write("\67\3\67\5\67\u03d1\n\67\3\67\3\67\3\67\3\67\3\67\5\67")
        buf.write("\u03d8\n\67\7\67\u03da\n\67\f\67\16\67\u03dd\13\67\38")
        buf.write("\38\38\38\58\u03e3\n8\39\39\39\39\39\39\59\u03eb\n9\3")
        buf.write("9\39\39\59\u03f0\n9\39\39\39\39\79\u03f6\n9\f9\169\u03f9")
        buf.write("\139\3:\3:\3:\7:\u03fe\n:\f:\16:\u0401\13:\3;\3;\3;\7")
        buf.write(";\u0406\n;\f;\16;\u0409\13;\3<\3<\5<\u040d\n<\3=\3=\3")
        buf.write("=\5=\u0412\n=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u041c\n=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\5=\u0425\n=\3=\3=\3=\3=\5=\u042b\n=\3")
        buf.write("=\3=\3=\3=\3=\7=\u0432\n=\f=\16=\u0435\13=\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\7>\u0444\n>\f>\16>\u0447")
        buf.write("\13>\3>\3>\3>\3>\3>\3>\3>\6>\u0450\n>\r>\16>\u0451\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u045f\n>\3>\3>\3>\3")
        buf.write(">\7>\u0465\n>\f>\16>\u0468\13>\3?\3?\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\5@\u0473\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\5A\u0483\nA\3B\3B\3C\3C\5C\u0489\nC\3D\3D\3D\3D\3")
        buf.write("D\5D\u0490\nD\3D\5D\u0493\nD\3E\5E\u0496\nE\3E\3E\3F\3")
        buf.write("F\3G\3G\3H\3H\3H\3H\5H\u04a2\nH\3I\3I\3I\5I\u04a7\nI\5")
        buf.write("I\u04a9\nI\3J\3J\3K\3K\5K\u04af\nK\3L\3L\3L\7L\u04b4\n")
        buf.write("L\fL\16L\u04b7\13L\3M\3M\3N\3N\3N\5N\u04be\nN\3O\3O\3")
        buf.write("P\3P\3P\3P\3P\3P\7P\u04c8\nP\fP\16P\u04cb\13P\3P\5P\u04ce")
        buf.write("\nP\3P\2\5pxzQ\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\2\24")
        buf.write("\4\2\f\f&&\4\2\32\32//\4\2DDZZ\3\2jk\4\2\17\17%%\4\2\35")
        buf.write("\35;;\4\2EEXX\4\2\66\66AA\4\2\27\27\65\65\4\2\62\62gg")
        buf.write("\4\2MM~~\4\2..ee\5\2\4\6MM~~\5\2\3\3\5\6\t\13\4\2qqww")
        buf.write("\6\2 !++`bpp\r\2\21\26\31\31 \"\'\'\60\60==LLVV`clmpp")
        buf.write("\4\2++\\\\\2\u0562\2\u00a2\3\2\2\2\4\u00ab\3\2\2\2\6\u00b1")
        buf.write("\3\2\2\2\b\u00de\3\2\2\2\n\u0102\3\2\2\2\f\u010c\3\2\2")
        buf.write("\2\16\u0116\3\2\2\2\20\u0118\3\2\2\2\22\u0129\3\2\2\2")
        buf.write("\24\u0131\3\2\2\2\26\u0137\3\2\2\2\30\u013b\3\2\2\2\32")
        buf.write("\u015d\3\2\2\2\34\u015f\3\2\2\2\36\u0185\3\2\2\2 \u01d3")
        buf.write("\3\2\2\2\"\u01d5\3\2\2\2$\u01dd\3\2\2\2&\u01df\3\2\2\2")
        buf.write("(\u01f4\3\2\2\2*\u022b\3\2\2\2,\u0233\3\2\2\2.\u0235\3")
        buf.write("\2\2\2\60\u024b\3\2\2\2\62\u0255\3\2\2\2\64\u0259\3\2")
        buf.write("\2\2\66\u025c\3\2\2\28\u0260\3\2\2\2:\u0279\3\2\2\2<\u0299")
        buf.write("\3\2\2\2>\u02c1\3\2\2\2@\u02c3\3\2\2\2B\u02ca\3\2\2\2")
        buf.write("D\u02d1\3\2\2\2F\u02d5\3\2\2\2H\u02fc\3\2\2\2J\u02fe\3")
        buf.write("\2\2\2L\u0305\3\2\2\2N\u030d\3\2\2\2P\u0313\3\2\2\2R\u0323")
        buf.write("\3\2\2\2T\u0325\3\2\2\2V\u0335\3\2\2\2X\u0337\3\2\2\2")
        buf.write("Z\u0345\3\2\2\2\\\u0348\3\2\2\2^\u0353\3\2\2\2`\u035d")
        buf.write("\3\2\2\2b\u0385\3\2\2\2d\u03b0\3\2\2\2f\u03b2\3\2\2\2")
        buf.write("h\u03bf\3\2\2\2j\u03c5\3\2\2\2l\u03d0\3\2\2\2n\u03e2\3")
        buf.write("\2\2\2p\u03ef\3\2\2\2r\u03fa\3\2\2\2t\u0402\3\2\2\2v\u040c")
        buf.write("\3\2\2\2x\u040e\3\2\2\2z\u045e\3\2\2\2|\u0469\3\2\2\2")
        buf.write("~\u0472\3\2\2\2\u0080\u0482\3\2\2\2\u0082\u0484\3\2\2")
        buf.write("\2\u0084\u0488\3\2\2\2\u0086\u0492\3\2\2\2\u0088\u0495")
        buf.write("\3\2\2\2\u008a\u0499\3\2\2\2\u008c\u049b\3\2\2\2\u008e")
        buf.write("\u049d\3\2\2\2\u0090\u04a3\3\2\2\2\u0092\u04aa\3\2\2\2")
        buf.write("\u0094\u04ae\3\2\2\2\u0096\u04b0\3\2\2\2\u0098\u04b8\3")
        buf.write("\2\2\2\u009a\u04bd\3\2\2\2\u009c\u04bf\3\2\2\2\u009e\u04cd")
        buf.write("\3\2\2\2\u00a0\u00a3\5\4\3\2\u00a1\u00a3\5\6\4\2\u00a2")
        buf.write("\u00a0\3\2\2\2\u00a2\u00a1\3\2\2\2\u00a3\3\3\2\2\2\u00a4")
        buf.write("\u00ac\5@!\2\u00a5\u00ac\5H%\2\u00a6\u00ac\5f\64\2\u00a7")
        buf.write("\u00ac\5B\"\2\u00a8\u00ac\5h\65\2\u00a9\u00ac\5J&\2\u00aa")
        buf.write("\u00ac\5N(\2\u00ab\u00a4\3\2\2\2\u00ab\u00a5\3\2\2\2\u00ab")
        buf.write("\u00a6\3\2\2\2\u00ab\u00a7\3\2\2\2\u00ab\u00a8\3\2\2\2")
        buf.write("\u00ab\u00a9\3\2\2\2\u00ab\u00aa\3\2\2\2\u00ac\5\3\2\2")
        buf.write("\2\u00ad\u00b2\5\b\5\2\u00ae\u00b2\5\34\17\2\u00af\u00b2")
        buf.write("\5$\23\2\u00b0\u00b2\5\36\20\2\u00b1\u00ad\3\2\2\2\u00b1")
        buf.write("\u00ae\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b0\3\2\2\2")
        buf.write("\u00b2\7\3\2\2\2\u00b3\u00df\5\n\6\2\u00b4\u00df\5\f\7")
        buf.write("\2\u00b5\u00b7\5\20\t\2\u00b6\u00b8\5\22\n\2\u00b7\u00b6")
        buf.write("\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9")
        buf.write("\u00ba\3\2\2\2\u00ba\u00c3\3\2\2\2\u00bb\u00bd\7f\2\2")
        buf.write("\u00bc\u00be\t\2\2\2\u00bd\u00bc\3\2\2\2\u00bd\u00be\3")
        buf.write("\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00c2\5\n\6\2\u00c0\u00c2")
        buf.write("\5\f\7\2\u00c1\u00bf\3\2\2\2\u00c1\u00c0\3\2\2\2\u00c2")
        buf.write("\u00c4\3\2\2\2\u00c3\u00bb\3\2\2\2\u00c3\u00c4\3\2\2\2")
        buf.write("\u00c4\u00c6\3\2\2\2\u00c5\u00c7\5\60\31\2\u00c6\u00c5")
        buf.write("\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9\3\2\2\2\u00c8")
        buf.write("\u00ca\5\64\33\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca\3\2\2")
        buf.write("\2\u00ca\u00df\3\2\2\2\u00cb\u00cd\5\16\b\2\u00cc\u00ce")
        buf.write("\5\24\13\2\u00cd\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d6\3\2\2\2")
        buf.write("\u00d1\u00d3\7f\2\2\u00d2\u00d4\t\2\2\2\u00d3\u00d2\3")
        buf.write("\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d7")
        buf.write("\5\f\7\2\u00d6\u00d1\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7")
        buf.write("\u00d9\3\2\2\2\u00d8\u00da\5\60\31\2\u00d9\u00d8\3\2\2")
        buf.write("\2\u00d9\u00da\3\2\2\2\u00da\u00dc\3\2\2\2\u00db\u00dd")
        buf.write("\5\64\33\2\u00dc\u00db\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd")
        buf.write("\u00df\3\2\2\2\u00de\u00b3\3\2\2\2\u00de\u00b4\3\2\2\2")
        buf.write("\u00de\u00b5\3\2\2\2\u00de\u00cb\3\2\2\2\u00df\t\3\2\2")
        buf.write("\2\u00e0\u00e4\7[\2\2\u00e1\u00e3\5\26\f\2\u00e2\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6\u00e4\3\2\2\2")
        buf.write("\u00e7\u00e9\5\30\r\2\u00e8\u00ea\5.\30\2\u00e9\u00e8")
        buf.write("\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb")
        buf.write("\u00ed\5\60\31\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2")
        buf.write("\2\u00ed\u00ef\3\2\2\2\u00ee\u00f0\5\64\33\2\u00ef\u00ee")
        buf.write("\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u0103\3\2\2\2\u00f1")
        buf.write("\u00f5\7[\2\2\u00f2\u00f4\5\26\f\2\u00f3\u00f2\3\2\2\2")
        buf.write("\u00f4\u00f7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f6\3")
        buf.write("\2\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u00fa")
        buf.write("\5\30\r\2\u00f9\u00fb\5.\30\2\u00fa\u00f9\3\2\2\2\u00fa")
        buf.write("\u00fb\3\2\2\2\u00fb\u00fd\3\2\2\2\u00fc\u00fe\5\60\31")
        buf.write("\2\u00fd\u00fc\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0100")
        buf.write("\3\2\2\2\u00ff\u0101\5\64\33\2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0103\3\2\2\2\u0102\u00e0\3\2\2\2")
        buf.write("\u0102\u00f1\3\2\2\2\u0103\13\3\2\2\2\u0104\u0105\7\u0080")
        buf.write("\2\2\u0105\u0106\5\n\6\2\u0106\u0107\7\u0081\2\2\u0107")
        buf.write("\u010d\3\2\2\2\u0108\u0109\7\u0080\2\2\u0109\u010a\5\f")
        buf.write("\7\2\u010a\u010b\7\u0081\2\2\u010b\u010d\3\2\2\2\u010c")
        buf.write("\u0104\3\2\2\2\u010c\u0108\3\2\2\2\u010d\r\3\2\2\2\u010e")
        buf.write("\u010f\7\u0080\2\2\u010f\u0110\5\20\t\2\u0110\u0111\7")
        buf.write("\u0081\2\2\u0111\u0117\3\2\2\2\u0112\u0113\7\u0080\2\2")
        buf.write("\u0113\u0114\5\16\b\2\u0114\u0115\7\u0081\2\2\u0115\u0117")
        buf.write("\3\2\2\2\u0116\u010e\3\2\2\2\u0116\u0112\3\2\2\2\u0117")
        buf.write("\17\3\2\2\2\u0118\u011c\7[\2\2\u0119\u011b\5\26\f\2\u011a")
        buf.write("\u0119\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2")
        buf.write("\u011c\u011d\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u011c\3")
        buf.write("\2\2\2\u011f\u0121\5\30\r\2\u0120\u0122\5.\30\2\u0121")
        buf.write("\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2")
        buf.write("\u0123\u0125\5\60\31\2\u0124\u0123\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0128\5\64\33\2\u0127")
        buf.write("\u0126\3\2\2\2\u0127\u0128\3\2\2\2\u0128\21\3\2\2\2\u0129")
        buf.write("\u012b\7f\2\2\u012a\u012c\t\2\2\2\u012b\u012a\3\2\2\2")
        buf.write("\u012b\u012c\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u0130\5")
        buf.write("\20\t\2\u012e\u0130\5\16\b\2\u012f\u012d\3\2\2\2\u012f")
        buf.write("\u012e\3\2\2\2\u0130\23\3\2\2\2\u0131\u0133\7f\2\2\u0132")
        buf.write("\u0134\t\2\2\2\u0133\u0132\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0135\3\2\2\2\u0135\u0136\5\16\b\2\u0136\25\3\2")
        buf.write("\2\2\u0137\u0138\t\2\2\2\u0138\27\3\2\2\2\u0139\u013c")
        buf.write("\7\3\2\2\u013a\u013c\5\32\16\2\u013b\u0139\3\2\2\2\u013b")
        buf.write("\u013a\3\2\2\2\u013c\u0141\3\2\2\2\u013d\u013e\7\u0082")
        buf.write("\2\2\u013e\u0140\5\32\16\2\u013f\u013d\3\2\2\2\u0140\u0143")
        buf.write("\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142")
        buf.write("\31\3\2\2\2\u0143\u0141\3\2\2\2\u0144\u0145\5\u008eH\2")
        buf.write("\u0145\u0146\7\177\2\2\u0146\u0147\7\3\2\2\u0147\u015e")
        buf.write("\3\2\2\2\u0148\u014d\5\u0090I\2\u0149\u014b\7\16\2\2\u014a")
        buf.write("\u0149\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\u014e\5\u0094K\2\u014d\u014a\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u015e\3\2\2\2\u014f\u0154\5j\66\2\u0150")
        buf.write("\u0152\7\16\2\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2")
        buf.write("\2\u0152\u0153\3\2\2\2\u0153\u0155\5\u0094K\2\u0154\u0151")
        buf.write("\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u015e\3\2\2\2\u0156")
        buf.write("\u015b\5p9\2\u0157\u0159\7\16\2\2\u0158\u0157\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c\5")
        buf.write("\u0094K\2\u015b\u0158\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write("\u015e\3\2\2\2\u015d\u0144\3\2\2\2\u015d\u0148\3\2\2\2")
        buf.write("\u015d\u014f\3\2\2\2\u015d\u0156\3\2\2\2\u015e\33\3\2")
        buf.write("\2\2\u015f\u0161\7<\2\2\u0160\u0162\79\2\2\u0161\u0160")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0163\3\2\2\2\u0163")
        buf.write("\u0164\7>\2\2\u0164\u0175\5\u0092J\2\u0165\u0166\7\u0080")
        buf.write("\2\2\u0166\u0167\5\u0096L\2\u0167\u0168\7\u0081\2\2\u0168")
        buf.write("\u016a\3\2\2\2\u0169\u0165\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\u016b\3\2\2\2\u016b\u0176\5 \21\2\u016c\u016d\7")
        buf.write("\\\2\2\u016d\u0172\5\"\22\2\u016e\u016f\7\u0082\2\2\u016f")
        buf.write("\u0171\5\"\22\2\u0170\u016e\3\2\2\2\u0171\u0174\3\2\2")
        buf.write("\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0176")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0169\3\2\2\2\u0175")
        buf.write("\u016c\3\2\2\2\u0176\u0183\3\2\2\2\u0177\u0178\7N\2\2")
        buf.write("\u0178\u0179\7)\2\2\u0179\u017a\7A\2\2\u017a\u017b\7h")
        buf.write("\2\2\u017b\u0180\5\"\22\2\u017c\u017d\7\u0082\2\2\u017d")
        buf.write("\u017f\5\"\22\2\u017e\u017c\3\2\2\2\u017f\u0182\3\2\2")
        buf.write("\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0184")
        buf.write("\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0177\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\35\3\2\2\2\u0185\u0186\7I\2\2\u0186")
        buf.write("\u0188\7\36\2\2\u0187\u0189\7J\2\2\u0188\u0187\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b\7")
        buf.write("\67\2\2\u018b\u018c\7v\2\2\u018c\u018d\7>\2\2\u018d\u018e")
        buf.write("\7^\2\2\u018e\u0194\5\u0092J\2\u018f\u0190\7R\2\2\u0190")
        buf.write("\u0191\7\u0080\2\2\u0191\u0192\5\u0096L\2\u0192\u0193")
        buf.write("\7\u0081\2\2\u0193\u0195\3\2\2\2\u0194\u018f\3\2\2\2\u0194")
        buf.write("\u0195\3\2\2\2\u0195\u019c\3\2\2\2\u0196\u0198\t\3\2\2")
        buf.write("\u0197\u0199\5*\26\2\u0198\u0197\3\2\2\2\u0199\u019a\3")
        buf.write("\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d")
        buf.write("\3\2\2\2\u019c\u0196\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write("\u01a4\3\2\2\2\u019e\u01a0\7D\2\2\u019f\u01a1\5,\27\2")
        buf.write("\u01a0\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a0\3")
        buf.write("\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2\u01a4\u019e")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01aa\3\2\2\2\u01a6")
        buf.write("\u01a7\79\2\2\u01a7\u01a8\5\u008aF\2\u01a8\u01a9\t\4\2")
        buf.write("\2\u01a9\u01ab\3\2\2\2\u01aa\u01a6\3\2\2\2\u01aa\u01ab")
        buf.write("\3\2\2\2\u01ab\u01b7\3\2\2\2\u01ac\u01ad\7\u0080\2\2\u01ad")
        buf.write("\u01b2\5\u0084C\2\u01ae\u01af\7\u0082\2\2\u01af\u01b1")
        buf.write("\5\u0084C\2\u01b0\u01ae\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2")
        buf.write("\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2")
        buf.write("\u01b4\u01b2\3\2\2\2\u01b5\u01b6\7\u0081\2\2\u01b6\u01b8")
        buf.write("\3\2\2\2\u01b7\u01ac\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8")
        buf.write("\u01c2\3\2\2\2\u01b9\u01ba\7\\\2\2\u01ba\u01bf\5\"\22")
        buf.write("\2\u01bb\u01bc\7\u0082\2\2\u01bc\u01be\5\"\22\2\u01bd")
        buf.write("\u01bb\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2")
        buf.write("\u01bf\u01c0\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3")
        buf.write("\2\2\2\u01c2\u01b9\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\37")
        buf.write("\3\2\2\2\u01c4\u01d4\5\b\5\2\u01c5\u01c6\t\5\2\2\u01c6")
        buf.write("\u01c7\7\u0080\2\2\u01c7\u01c8\5t;\2\u01c8\u01d0\7\u0081")
        buf.write("\2\2\u01c9\u01ca\7\u0082\2\2\u01ca\u01cb\7\u0080\2\2\u01cb")
        buf.write("\u01cc\5t;\2\u01cc\u01cd\7\u0081\2\2\u01cd\u01cf\3\2\2")
        buf.write("\2\u01ce\u01c9\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce")
        buf.write("\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2")
        buf.write("\u01d0\3\2\2\2\u01d3\u01c4\3\2\2\2\u01d3\u01c5\3\2\2\2")
        buf.write("\u01d4!\3\2\2\2\u01d5\u01d6\5\u0090I\2\u01d6\u01d9\7{")
        buf.write("\2\2\u01d7\u01da\5p9\2\u01d8\u01da\7#\2\2\u01d9\u01d7")
        buf.write("\3\2\2\2\u01d9\u01d8\3\2\2\2\u01da#\3\2\2\2\u01db\u01de")
        buf.write("\5&\24\2\u01dc\u01de\5(\25\2\u01dd\u01db\3\2\2\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01de%\3\2\2\2\u01df\u01e0\7$\2\2\u01e0")
        buf.write("\u01e1\7\61\2\2\u01e1\u01e7\5\u0092J\2\u01e2\u01e3\7R")
        buf.write("\2\2\u01e3\u01e4\7\u0080\2\2\u01e4\u01e5\5\u0096L\2\u01e5")
        buf.write("\u01e6\7\u0081\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01e2\3\2")
        buf.write("\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01ea")
        buf.write("\7n\2\2\u01ea\u01ec\5p9\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef\5\60\31\2\u01ee")
        buf.write("\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f2\3\2\2\2")
        buf.write("\u01f0\u01f1\7G\2\2\u01f1\u01f3\5\u008aF\2\u01f2\u01f0")
        buf.write("\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\'\3\2\2\2\u01f4\u021c")
        buf.write("\7$\2\2\u01f5\u01f8\5\u0092J\2\u01f6\u01f7\7\177\2\2\u01f7")
        buf.write("\u01f9\7\3\2\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2")
        buf.write("\u01f9\u0202\3\2\2\2\u01fa\u01fb\7\u0082\2\2\u01fb\u01fe")
        buf.write("\5\u0092J\2\u01fc\u01fd\7\177\2\2\u01fd\u01ff\7\3\2\2")
        buf.write("\u01fe\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0201\3")
        buf.write("\2\2\2\u0200\u01fa\3\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200")
        buf.write("\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0205\3\2\2\2\u0204")
        buf.write("\u0202\3\2\2\2\u0205\u0206\7\61\2\2\u0206\u0207\58\35")
        buf.write("\2\u0207\u021d\3\2\2\2\u0208\u0209\7\61\2\2\u0209\u020c")
        buf.write("\5\u0092J\2\u020a\u020b\7\177\2\2\u020b\u020d\7\3\2\2")
        buf.write("\u020c\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0216\3")
        buf.write("\2\2\2\u020e\u020f\7\u0082\2\2\u020f\u0212\5\u0092J\2")
        buf.write("\u0210\u0211\7\177\2\2\u0211\u0213\7\3\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\3\2\2\2\u0214")
        buf.write("\u020e\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2")
        buf.write("\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216\3")
        buf.write("\2\2\2\u0219\u021a\7i\2\2\u021a\u021b\58\35\2\u021b\u021d")
        buf.write("\3\2\2\2\u021c\u01f5\3\2\2\2\u021c\u0208\3\2\2\2\u021d")
        buf.write("\u0220\3\2\2\2\u021e\u021f\7n\2\2\u021f\u0221\5p9\2\u0220")
        buf.write("\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221)\3\2\2\2\u0222")
        buf.write("\u0223\7_\2\2\u0223\u0224\7\30\2\2\u0224\u022c\7v\2\2")
        buf.write("\u0225\u0226\7*\2\2\u0226\u0227\7\30\2\2\u0227\u022c\7")
        buf.write("v\2\2\u0228\u0229\7,\2\2\u0229\u022a\7\30\2\2\u022a\u022c")
        buf.write("\7v\2\2\u022b\u0222\3\2\2\2\u022b\u0225\3\2\2\2\u022b")
        buf.write("\u0228\3\2\2\2\u022c+\3\2\2\2\u022d\u022e\7]\2\2\u022e")
        buf.write("\u022f\7\30\2\2\u022f\u0234\7v\2\2\u0230\u0231\7_\2\2")
        buf.write("\u0231\u0232\7\30\2\2\u0232\u0234\7v\2\2\u0233\u022d\3")
        buf.write("\2\2\2\u0233\u0230\3\2\2\2\u0234-\3\2\2\2\u0235\u0236")
        buf.write("\7\61\2\2\u0236\u0239\58\35\2\u0237\u0238\7n\2\2\u0238")
        buf.write("\u023a\5p9\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u0245\3\2\2\2\u023b\u023c\7\63\2\2\u023c\u023d\7\30\2")
        buf.write("\2\u023d\u0242\5\66\34\2\u023e\u023f\7\u0082\2\2\u023f")
        buf.write("\u0241\5\66\34\2\u0240\u023e\3\2\2\2\u0241\u0244\3\2\2")
        buf.write("\2\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0246")
        buf.write("\3\2\2\2\u0244\u0242\3\2\2\2\u0245\u023b\3\2\2\2\u0245")
        buf.write("\u0246\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0248\7\64\2")
        buf.write("\2\u0248\u024a\5p9\2\u0249\u0247\3\2\2\2\u0249\u024a\3")
        buf.write("\2\2\2\u024a/\3\2\2\2\u024b\u024c\7P\2\2\u024c\u024d\7")
        buf.write("\30\2\2\u024d\u0252\5\62\32\2\u024e\u024f\7\u0082\2\2")
        buf.write("\u024f\u0251\5\62\32\2\u0250\u024e\3\2\2\2\u0251\u0254")
        buf.write("\3\2\2\2\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("\61\3\2\2\2\u0254\u0252\3\2\2\2\u0255\u0257\5p9\2\u0256")
        buf.write("\u0258\t\6\2\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2")
        buf.write("\u0258\63\3\2\2\2\u0259\u025a\7G\2\2\u025a\u025b\5\u008a")
        buf.write("F\2\u025b\65\3\2\2\2\u025c\u025e\5p9\2\u025d\u025f\t\6")
        buf.write("\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\67")
        buf.write("\3\2\2\2\u0260\u0265\5:\36\2\u0261\u0262\7\u0082\2\2\u0262")
        buf.write("\u0264\5:\36\2\u0263\u0261\3\2\2\2\u0264\u0267\3\2\2\2")
        buf.write("\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u02669\3\2\2")
        buf.write("\2\u0267\u0265\3\2\2\2\u0268\u026c\5<\37\2\u0269\u026b")
        buf.write("\5> \2\u026a\u0269\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a")
        buf.write("\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u027a\3\2\2\2\u026e")
        buf.write("\u026c\3\2\2\2\u026f\u0270\7\u0080\2\2\u0270\u0274\5<")
        buf.write("\37\2\u0271\u0273\5> \2\u0272\u0271\3\2\2\2\u0273\u0276")
        buf.write("\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275")
        buf.write("\u0277\3\2\2\2\u0276\u0274\3\2\2\2\u0277\u0278\7\u0081")
        buf.write("\2\2\u0278\u027a\3\2\2\2\u0279\u0268\3\2\2\2\u0279\u026f")
        buf.write("\3\2\2\2\u027a;\3\2\2\2\u027b\u0281\5\u0092J\2\u027c\u027d")
        buf.write("\7R\2\2\u027d\u027e\7\u0080\2\2\u027e\u027f\5\u0096L\2")
        buf.write("\u027f\u0280\7\u0081\2\2\u0280\u0282\3\2\2\2\u0281\u027c")
        buf.write("\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0287\3\2\2\2\u0283")
        buf.write("\u0285\7\16\2\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2")
        buf.write("\2\u0285\u0286\3\2\2\2\u0286\u0288\5\u0094K\2\u0287\u0284")
        buf.write("\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u029a\3\2\2\2\u0289")
        buf.write("\u028f\5\b\5\2\u028a\u028b\7\u0080\2\2\u028b\u028c\5\b")
        buf.write("\5\2\u028c\u028d\7\u0081\2\2\u028d\u028f\3\2\2\2\u028e")
        buf.write("\u0289\3\2\2\2\u028e\u028a\3\2\2\2\u028f\u0291\3\2\2\2")
        buf.write("\u0290\u0292\7\16\2\2\u0291\u0290\3\2\2\2\u0291\u0292")
        buf.write("\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\5\u0094K\2\u0294")
        buf.write("\u029a\3\2\2\2\u0295\u0296\7\u0080\2\2\u0296\u0297\58")
        buf.write("\35\2\u0297\u0298\7\u0081\2\2\u0298\u029a\3\2\2\2\u0299")
        buf.write("\u027b\3\2\2\2\u0299\u028e\3\2\2\2\u0299\u0295\3\2\2\2")
        buf.write("\u029a=\3\2\2\2\u029b\u029d\t\7\2\2\u029c\u029b\3\2\2")
        buf.write("\2\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f")
        buf.write("\7@\2\2\u029f\u02a7\5<\37\2\u02a0\u02a1\7N\2\2\u02a1\u02a8")
        buf.write("\5p9\2\u02a2\u02a3\7i\2\2\u02a3\u02a4\7\u0080\2\2\u02a4")
        buf.write("\u02a5\5\u0096L\2\u02a5\u02a6\7\u0081\2\2\u02a6\u02a8")
        buf.write("\3\2\2\2\u02a7\u02a0\3\2\2\2\u02a7\u02a2\3\2\2\2\u02a7")
        buf.write("\u02a8\3\2\2\2\u02a8\u02c2\3\2\2\2\u02a9\u02ab\t\b\2\2")
        buf.write("\u02aa\u02ac\7Q\2\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3")
        buf.write("\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae\7@\2\2\u02ae\u02b6")
        buf.write("\5<\37\2\u02af\u02b0\7N\2\2\u02b0\u02b7\5p9\2\u02b1\u02b2")
        buf.write("\7i\2\2\u02b2\u02b3\7\u0080\2\2\u02b3\u02b4\5\u0096L\2")
        buf.write("\u02b4\u02b5\7\u0081\2\2\u02b5\u02b7\3\2\2\2\u02b6\u02af")
        buf.write("\3\2\2\2\u02b6\u02b1\3\2\2\2\u02b7\u02c2\3\2\2\2\u02b8")
        buf.write("\u02bd\7K\2\2\u02b9\u02bb\t\b\2\2\u02ba\u02bc\7Q\2\2\u02bb")
        buf.write("\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2")
        buf.write("\u02bd\u02b9\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\3")
        buf.write("\2\2\2\u02bf\u02c0\7@\2\2\u02c0\u02c2\5<\37\2\u02c1\u029c")
        buf.write("\3\2\2\2\u02c1\u02a9\3\2\2\2\u02c1\u02b8\3\2\2\2\u02c2")
        buf.write("?\3\2\2\2\u02c3\u02c4\7\34\2\2\u02c4\u02c6\7\37\2\2\u02c5")
        buf.write("\u02c7\5D#\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02c9\5\u0094K\2\u02c9A\3\2\2\2\u02ca")
        buf.write("\u02cb\7(\2\2\u02cb\u02cd\7\37\2\2\u02cc\u02ce\5F$\2\u02cd")
        buf.write("\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2")
        buf.write("\u02cf\u02d0\5\u0094K\2\u02d0C\3\2\2\2\u02d1\u02d2\78")
        buf.write("\2\2\u02d2\u02d3\7M\2\2\u02d3\u02d4\7-\2\2\u02d4E\3\2")
        buf.write("\2\2\u02d5\u02d6\78\2\2\u02d6\u02d7\7-\2\2\u02d7G\3\2")
        buf.write("\2\2\u02d8\u02d9\7\34\2\2\u02d9\u02db\7^\2\2\u02da\u02dc")
        buf.write("\5D#\2\u02db\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dd\u02de\5\u0092J\2\u02de\u02df\7F\2\2\u02df")
        buf.write("\u02e0\5\u0092J\2\u02e0\u02fd\3\2\2\2\u02e1\u02e2\7\34")
        buf.write("\2\2\u02e2\u02e4\7^\2\2\u02e3\u02e5\5D#\2\u02e4\u02e3")
        buf.write("\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6")
        buf.write("\u02e8\5\u0092J\2\u02e7\u02e9\5P)\2\u02e8\u02e7\3\2\2")
        buf.write("\2\u02e8\u02e9\3\2\2\2\u02e9\u02eb\3\2\2\2\u02ea\u02ec")
        buf.write("\5`\61\2\u02eb\u02ea\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec")
        buf.write("\u02ee\3\2\2\2\u02ed\u02ef\7\16\2\2\u02ee\u02ed\3\2\2")
        buf.write("\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1")
        buf.write("\5\b\5\2\u02f1\u02fd\3\2\2\2\u02f2\u02f3\7\34\2\2\u02f3")
        buf.write("\u02f5\7^\2\2\u02f4\u02f6\5D#\2\u02f5\u02f4\3\2\2\2\u02f5")
        buf.write("\u02f6\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\5\u0092")
        buf.write("J\2\u02f8\u02fa\5P)\2\u02f9\u02fb\5`\61\2\u02fa\u02f9")
        buf.write("\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc")
        buf.write("\u02d8\3\2\2\2\u02fc\u02e1\3\2\2\2\u02fc\u02f2\3\2\2\2")
        buf.write("\u02fdI\3\2\2\2\u02fe\u02ff\7(\2\2\u02ff\u0301\7^\2\2")
        buf.write("\u0300\u0302\5F$\2\u0301\u0300\3\2\2\2\u0301\u0302\3\2")
        buf.write("\2\2\u0302\u0303\3\2\2\2\u0303\u0304\5L\'\2\u0304K\3\2")
        buf.write("\2\2\u0305\u030a\5\u0092J\2\u0306\u0307\7\u0082\2\2\u0307")
        buf.write("\u0309\5\u0092J\2\u0308\u0306\3\2\2\2\u0309\u030c\3\2")
        buf.write("\2\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030bM\3")
        buf.write("\2\2\2\u030c\u030a\3\2\2\2\u030d\u030f\7d\2\2\u030e\u0310")
        buf.write("\7^\2\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0312\5\u0092J\2\u0312O\3\2\2\2\u0313")
        buf.write("\u0314\7\u0080\2\2\u0314\u0319\5R*\2\u0315\u0316\7\u0082")
        buf.write("\2\2\u0316\u0318\5R*\2\u0317\u0315\3\2\2\2\u0318\u031b")
        buf.write("\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a")
        buf.write("\u031c\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u031d\7\u0081")
        buf.write("\2\2\u031dQ\3\2\2\2\u031e\u031f\5\u0094K\2\u031f\u0320")
        buf.write("\5T+\2\u0320\u0324\3\2\2\2\u0321\u0324\5d\63\2\u0322\u0324")
        buf.write("\5X-\2\u0323\u031e\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0322")
        buf.write("\3\2\2\2\u0324S\3\2\2\2\u0325\u0329\5\u009eP\2\u0326\u0328")
        buf.write("\5V,\2\u0327\u0326\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032aU\3\2\2\2\u032b\u0329")
        buf.write("\3\2\2\2\u032c\u0336\5\u0088E\2\u032d\u032f\7T\2\2\u032e")
        buf.write("\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3\2\2\2")
        buf.write("\u0330\u0336\7A\2\2\u0331\u0333\7g\2\2\u0332\u0334\7A")
        buf.write("\2\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336")
        buf.write("\3\2\2\2\u0335\u032c\3\2\2\2\u0335\u032e\3\2\2\2\u0335")
        buf.write("\u0331\3\2\2\2\u0336W\3\2\2\2\u0337\u0339\t\t\2\2\u0338")
        buf.write("\u033a\5\u0094K\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2")
        buf.write("\2\2\u033a\u033c\3\2\2\2\u033b\u033d\5Z.\2\u033c\u033b")
        buf.write("\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0342\5\\/\2\u033f\u0341\5Z.\2\u0340\u033f\3\2\2\2\u0341")
        buf.write("\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2")
        buf.write("\u0343Y\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0346\7i\2\2")
        buf.write("\u0346\u0347\t\n\2\2\u0347[\3\2\2\2\u0348\u0349\7\u0080")
        buf.write("\2\2\u0349\u034e\5^\60\2\u034a\u034b\7\u0082\2\2\u034b")
        buf.write("\u034d\5^\60\2\u034c\u034a\3\2\2\2\u034d\u0350\3\2\2\2")
        buf.write("\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3")
        buf.write("\2\2\2\u0350\u034e\3\2\2\2\u0351\u0352\7\u0081\2\2\u0352")
        buf.write("]\3\2\2\2\u0353\u0358\5\u0094K\2\u0354\u0355\7\u0080\2")
        buf.write("\2\u0355\u0356\5\u008aF\2\u0356\u0357\7\u0081\2\2\u0357")
        buf.write("\u0359\3\2\2\2\u0358\u0354\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359\u035b\3\2\2\2\u035a\u035c\t\6\2\2\u035b\u035a\3")
        buf.write("\2\2\2\u035b\u035c\3\2\2\2\u035c_\3\2\2\2\u035d\u035e")
        buf.write("\7R\2\2\u035e\u035f\7\30\2\2\u035f\u0362\5b\62\2\u0360")
        buf.write("\u0361\7S\2\2\u0361\u0363\5\u008aF\2\u0362\u0360\3\2\2")
        buf.write("\2\u0362\u0363\3\2\2\2\u0363a\3\2\2\2\u0364\u0365\7\65")
        buf.write("\2\2\u0365\u0366\7\u0080\2\2\u0366\u0367\5p9\2\u0367\u0368")
        buf.write("\7\u0082\2\2\u0368\u0369\5p9\2\u0369\u036a\7\u0081\2\2")
        buf.write("\u036a\u0386\3\2\2\2\u036b\u036c\7A\2\2\u036c\u036d\7")
        buf.write("\u0080\2\2\u036d\u036e\5\u0096L\2\u036e\u036f\7\u0081")
        buf.write("\2\2\u036f\u0386\3\2\2\2\u0370\u0371\7U\2\2\u0371\u0372")
        buf.write("\7\u0080\2\2\u0372\u0373\5p9\2\u0373\u0374\7\u0082\2\2")
        buf.write("\u0374\u0375\5p9\2\u0375\u0376\7\u0082\2\2\u0376\u0377")
        buf.write("\5p9\2\u0377\u0378\7\u0081\2\2\u0378\u0386\3\2\2\2\u0379")
        buf.write("\u0383\7H\2\2\u037a\u037b\7\u0080\2\2\u037b\u037c\5p9")
        buf.write("\2\u037c\u037d\7\u0081\2\2\u037d\u0384\3\2\2\2\u037e\u037f")
        buf.write("\7\32\2\2\u037f\u0380\7\u0080\2\2\u0380\u0381\5\u0096")
        buf.write("L\2\u0381\u0382\7\u0081\2\2\u0382\u0384\3\2\2\2\u0383")
        buf.write("\u037a\3\2\2\2\u0383\u037e\3\2\2\2\u0384\u0386\3\2\2\2")
        buf.write("\u0385\u0364\3\2\2\2\u0385\u036b\3\2\2\2\u0385\u0370\3")
        buf.write("\2\2\2\u0385\u0379\3\2\2\2\u0386c\3\2\2\2\u0387\u0389")
        buf.write("\7\33\2\2\u0388\u038a\5\u0094K\2\u0389\u0388\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038c\3\2\2\2\u038b\u0387\3\2\2\2")
        buf.write("\u038b\u038c\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\7")
        buf.write("T\2\2\u038e\u0390\7A\2\2\u038f\u0391\5Z.\2\u0390\u038f")
        buf.write("\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392\3\2\2\2\u0392")
        buf.write("\u0396\5\\/\2\u0393\u0395\5Z.\2\u0394\u0393\3\2\2\2\u0395")
        buf.write("\u0398\3\2\2\2\u0396\u0394\3\2\2\2\u0396\u0397\3\2\2\2")
        buf.write("\u0397\u03b1\3\2\2\2\u0398\u0396\3\2\2\2\u0399\u039b\7")
        buf.write("\33\2\2\u039a\u039c\5\u0094K\2\u039b\u039a\3\2\2\2\u039b")
        buf.write("\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d\u0399\3\2\2\2")
        buf.write("\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\7")
        buf.write("g\2\2\u03a0\u03a2\t\t\2\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u03a4\3\2\2\2\u03a3\u03a5\5\u0094K\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2")
        buf.write("\u03a6\u03a8\5Z.\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2")
        buf.write("\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ad\5\\/\2\u03aa\u03ac")
        buf.write("\5Z.\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u038b\3\2\2\2\u03b0\u039d\3\2\2\2")
        buf.write("\u03b1e\3\2\2\2\u03b2\u03b4\7\34\2\2\u03b3\u03b5\t\13")
        buf.write("\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6")
        buf.write("\3\2\2\2\u03b6\u03b7\7\66\2\2\u03b7\u03b9\5\u0094K\2\u03b8")
        buf.write("\u03ba\5Z.\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03bc\7N\2\2\u03bc\u03bd\5\u0092")
        buf.write("J\2\u03bd\u03be\5\\/\2\u03beg\3\2\2\2\u03bf\u03c0\7(\2")
        buf.write("\2\u03c0\u03c1\7\66\2\2\u03c1\u03c2\5\u0094K\2\u03c2\u03c3")
        buf.write("\7N\2\2\u03c3\u03c4\5\u0092J\2\u03c4i\3\2\2\2\u03c5\u03c6")
        buf.write("\5\u008eH\2\u03c6\u03c8\7\u0080\2\2\u03c7\u03c9\5l\67")
        buf.write("\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca")
        buf.write("\3\2\2\2\u03ca\u03cb\7\u0081\2\2\u03cbk\3\2\2\2\u03cc")
        buf.write("\u03d1\5\u0086D\2\u03cd\u03d1\5\u0090I\2\u03ce\u03d1\5")
        buf.write("j\66\2\u03cf\u03d1\5p9\2\u03d0\u03cc\3\2\2\2\u03d0\u03cd")
        buf.write("\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf\3\2\2\2\u03d1")
        buf.write("\u03db\3\2\2\2\u03d2\u03d7\7\u0082\2\2\u03d3\u03d8\5\u0086")
        buf.write("D\2\u03d4\u03d8\5\u0090I\2\u03d5\u03d8\5j\66\2\u03d6\u03d8")
        buf.write("\5p9\2\u03d7\u03d3\3\2\2\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5")
        buf.write("\3\2\2\2\u03d7\u03d6\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9")
        buf.write("\u03d2\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2")
        buf.write("\u03db\u03dc\3\2\2\2\u03dcm\3\2\2\2\u03dd\u03db\3\2\2")
        buf.write("\2\u03de\u03e3\5\u0086D\2\u03df\u03e3\5\u0090I\2\u03e0")
        buf.write("\u03e3\5j\66\2\u03e1\u03e3\5p9\2\u03e2\u03de\3\2\2\2\u03e2")
        buf.write("\u03df\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e1\3\2\2\2")
        buf.write("\u03e3o\3\2\2\2\u03e4\u03e5\b9\1\2\u03e5\u03e6\t\f\2\2")
        buf.write("\u03e6\u03f0\5p9\6\u03e7\u03e8\5x=\2\u03e8\u03ea\7?\2")
        buf.write("\2\u03e9\u03eb\7M\2\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\t\r\2\2\u03ed")
        buf.write("\u03f0\3\2\2\2\u03ee\u03f0\5x=\2\u03ef\u03e4\3\2\2\2\u03ef")
        buf.write("\u03e7\3\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f7\3\2\2\2")
        buf.write("\u03f1\u03f2\f\5\2\2\u03f2\u03f3\5~@\2\u03f3\u03f4\5p")
        buf.write("9\6\u03f4\u03f6\3\2\2\2\u03f5\u03f1\3\2\2\2\u03f6\u03f9")
        buf.write("\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8")
        buf.write("q\3\2\2\2\u03f9\u03f7\3\2\2\2\u03fa\u03ff\5p9\2\u03fb")
        buf.write("\u03fc\7\u0082\2\2\u03fc\u03fe\5p9\2\u03fd\u03fb\3\2\2")
        buf.write("\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400s\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0407")
        buf.write("\5v<\2\u0403\u0404\7\u0082\2\2\u0404\u0406\5v<\2\u0405")
        buf.write("\u0403\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3\2\2\2")
        buf.write("\u0407\u0408\3\2\2\2\u0408u\3\2\2\2\u0409\u0407\3\2\2")
        buf.write("\2\u040a\u040d\5p9\2\u040b\u040d\7#\2\2\u040c\u040a\3")
        buf.write("\2\2\2\u040c\u040b\3\2\2\2\u040dw\3\2\2\2\u040e\u0411")
        buf.write("\b=\1\2\u040f\u0410\7x\2\2\u0410\u0412\7y\2\2\u0411\u040f")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write("\u0414\5z>\2\u0414\u0433\3\2\2\2\u0415\u0416\f\5\2\2\u0416")
        buf.write("\u0417\5\u0080A\2\u0417\u0418\5x=\6\u0418\u0432\3\2\2")
        buf.write("\2\u0419\u041b\f\4\2\2\u041a\u041c\7M\2\2\u041b\u041a")
        buf.write("\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\3\2\2\2\u041d")
        buf.write("\u041e\7\20\2\2\u041e\u041f\5x=\2\u041f\u0420\7\r\2\2")
        buf.write("\u0420\u0421\5x=\5\u0421\u0432\3\2\2\2\u0422\u0424\f\7")
        buf.write("\2\2\u0423\u0425\7M\2\2\u0424\u0423\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\7:\2\2\u0427")
        buf.write("\u042a\7\u0080\2\2\u0428\u042b\5\b\5\2\u0429\u042b\5r")
        buf.write(":\2\u042a\u0428\3\2\2\2\u042a\u0429\3\2\2\2\u042b\u042c")
        buf.write("\3\2\2\2\u042c\u042d\7\u0081\2\2\u042d\u0432\3\2\2\2\u042e")
        buf.write("\u042f\f\6\2\2\u042f\u0430\7?\2\2\u0430\u0432\5\u0088")
        buf.write("E\2\u0431\u0415\3\2\2\2\u0431\u0419\3\2\2\2\u0431\u0422")
        buf.write("\3\2\2\2\u0431\u042e\3\2\2\2\u0432\u0435\3\2\2\2\u0433")
        buf.write("\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434y\3\2\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0436\u0437\b>\1\2\u0437\u045f\5\u0086")
        buf.write("D\2\u0438\u045f\5\u0090I\2\u0439\u045f\5j\66\2\u043a\u043b")
        buf.write("\5|?\2\u043b\u043c\5z>\t\u043c\u045f\3\2\2\2\u043d\u043e")
        buf.write("\7\22\2\2\u043e\u045f\5z>\b\u043f\u0440\7\u0080\2\2\u0440")
        buf.write("\u0445\5p9\2\u0441\u0442\7\u0082\2\2\u0442\u0444\5p9\2")
        buf.write("\u0443\u0441\3\2\2\2\u0444\u0447\3\2\2\2\u0445\u0443\3")
        buf.write("\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448\3\2\2\2\u0447\u0445")
        buf.write("\3\2\2\2\u0448\u0449\7\u0081\2\2\u0449\u045f\3\2\2\2\u044a")
        buf.write("\u044b\7Y\2\2\u044b\u044c\7\u0080\2\2\u044c\u044f\5p9")
        buf.write("\2\u044d\u044e\7\u0082\2\2\u044e\u0450\5p9\2\u044f\u044d")
        buf.write("\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u044f\3\2\2\2\u0451")
        buf.write("\u0452\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\7\u0081")
        buf.write("\2\2\u0454\u045f\3\2\2\2\u0455\u0456\7-\2\2\u0456\u0457")
        buf.write("\7\u0080\2\2\u0457\u0458\5\b\5\2\u0458\u0459\7\u0081\2")
        buf.write("\2\u0459\u045f\3\2\2\2\u045a\u045b\7\u0080\2\2\u045b\u045c")
        buf.write("\5\b\5\2\u045c\u045d\7\u0081\2\2\u045d\u045f\3\2\2\2\u045e")
        buf.write("\u0436\3\2\2\2\u045e\u0438\3\2\2\2\u045e\u0439\3\2\2\2")
        buf.write("\u045e\u043a\3\2\2\2\u045e\u043d\3\2\2\2\u045e\u043f\3")
        buf.write("\2\2\2\u045e\u044a\3\2\2\2\u045e\u0455\3\2\2\2\u045e\u045a")
        buf.write("\3\2\2\2\u045f\u0466\3\2\2\2\u0460\u0461\f\3\2\2\u0461")
        buf.write("\u0462\5\u0082B\2\u0462\u0463\5z>\4\u0463\u0465\3\2\2")
        buf.write("\2\u0464\u0460\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0466\u0467\3\2\2\2\u0467{\3\2\2\2\u0468\u0466")
        buf.write("\3\2\2\2\u0469\u046a\t\16\2\2\u046a}\3\2\2\2\u046b\u0473")
        buf.write("\7\r\2\2\u046c\u046d\7\7\2\2\u046d\u0473\7\7\2\2\u046e")
        buf.write("\u0473\7o\2\2\u046f\u0473\7O\2\2\u0470\u0471\7\b\2\2\u0471")
        buf.write("\u0473\7\b\2\2\u0472\u046b\3\2\2\2\u0472\u046c\3\2\2\2")
        buf.write("\u0472\u046e\3\2\2\2\u0472\u046f\3\2\2\2\u0472\u0470\3")
        buf.write("\2\2\2\u0473\177\3\2\2\2\u0474\u0483\7{\2\2\u0475\u0483")
        buf.write("\7|\2\2\u0476\u0483\7}\2\2\u0477\u0478\7}\2\2\u0478\u0483")
        buf.write("\7{\2\2\u0479\u047a\7|\2\2\u047a\u0483\7{\2\2\u047b\u047c")
        buf.write("\7}\2\2\u047c\u0483\7|\2\2\u047d\u047e\7~\2\2\u047e\u0483")
        buf.write("\7{\2\2\u047f\u0480\7}\2\2\u0480\u0481\7{\2\2\u0481\u0483")
        buf.write("\7|\2\2\u0482\u0474\3\2\2\2\u0482\u0475\3\2\2\2\u0482")
        buf.write("\u0476\3\2\2\2\u0482\u0477\3\2\2\2\u0482\u0479\3\2\2\2")
        buf.write("\u0482\u047b\3\2\2\2\u0482\u047d\3\2\2\2\u0482\u047f\3")
        buf.write("\2\2\2\u0483\u0081\3\2\2\2\u0484\u0485\t\17\2\2\u0485")
        buf.write("\u0083\3\2\2\2\u0486\u0489\5\u0094K\2\u0487\u0489\7x\2")
        buf.write("\2\u0488\u0486\3\2\2\2\u0488\u0487\3\2\2\2\u0489\u0085")
        buf.write("\3\2\2\2\u048a\u0493\5\u009cO\2\u048b\u0493\5\u008aF\2")
        buf.write("\u048c\u0493\5\u008cG\2\u048d\u0493\7u\2\2\u048e\u0490")
        buf.write("\7M\2\2\u048f\u048e\3\2\2\2\u048f\u0490\3\2\2\2\u0490")
        buf.write("\u0491\3\2\2\2\u0491\u0493\t\20\2\2\u0492\u048a\3\2\2")
        buf.write("\2\u0492\u048b\3\2\2\2\u0492\u048c\3\2\2\2\u0492\u048d")
        buf.write("\3\2\2\2\u0492\u048f\3\2\2\2\u0493\u0087\3\2\2\2\u0494")
        buf.write("\u0496\7M\2\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2\2\2")
        buf.write("\u0496\u0497\3\2\2\2\u0497\u0498\t\20\2\2\u0498\u0089")
        buf.write("\3\2\2\2\u0499\u049a\7t\2\2\u049a\u008b\3\2\2\2\u049b")
        buf.write("\u049c\t\r\2\2\u049c\u008d\3\2\2\2\u049d\u04a1\5\u0094")
        buf.write("K\2\u049e\u04a2\7s\2\2\u049f\u04a0\7\177\2\2\u04a0\u04a2")
        buf.write("\5\u0094K\2\u04a1\u049e\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1")
        buf.write("\u04a2\3\2\2\2\u04a2\u008f\3\2\2\2\u04a3\u04a8\5\u0094")
        buf.write("K\2\u04a4\u04a6\5\u009aN\2\u04a5\u04a7\5\u009aN\2\u04a6")
        buf.write("\u04a5\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a9\3\2\2\2")
        buf.write("\u04a8\u04a4\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u0091\3")
        buf.write("\2\2\2\u04aa\u04ab\5\u008eH\2\u04ab\u0093\3\2\2\2\u04ac")
        buf.write("\u04af\7r\2\2\u04ad\u04af\5\u0098M\2\u04ae\u04ac\3\2\2")
        buf.write("\2\u04ae\u04ad\3\2\2\2\u04af\u0095\3\2\2\2\u04b0\u04b5")
        buf.write("\5\u0094K\2\u04b1\u04b2\7\u0082\2\2\u04b2\u04b4\5\u0094")
        buf.write("K\2\u04b3\u04b1\3\2\2\2\u04b4\u04b7\3\2\2\2\u04b5\u04b3")
        buf.write("\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u0097\3\2\2\2\u04b7")
        buf.write("\u04b5\3\2\2\2\u04b8\u04b9\t\21\2\2\u04b9\u0099\3\2\2")
        buf.write("\2\u04ba\u04be\7s\2\2\u04bb\u04bc\7\177\2\2\u04bc\u04be")
        buf.write("\5\u0094K\2\u04bd\u04ba\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be")
        buf.write("\u009b\3\2\2\2\u04bf\u04c0\7v\2\2\u04c0\u009d\3\2\2\2")
        buf.write("\u04c1\u04ce\t\22\2\2\u04c2\u04c3\t\23\2\2\u04c3\u04c4")
        buf.write("\7\u0080\2\2\u04c4\u04c9\7v\2\2\u04c5\u04c6\7\u0082\2")
        buf.write("\2\u04c6\u04c8\7v\2\2\u04c7\u04c5\3\2\2\2\u04c8\u04cb")
        buf.write("\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cc\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04ce\7\u0081")
        buf.write("\2\2\u04cd\u04c1\3\2\2\2\u04cd\u04c2\3\2\2\2\u04ce\u009f")
        buf.write("\3\2\2\2\u00b3\u00a2\u00ab\u00b1\u00b9\u00bd\u00c1\u00c3")
        buf.write("\u00c6\u00c9\u00cf\u00d3\u00d6\u00d9\u00dc\u00de\u00e4")
        buf.write("\u00e9\u00ec\u00ef\u00f5\u00fa\u00fd\u0100\u0102\u010c")
        buf.write("\u0116\u011c\u0121\u0124\u0127\u012b\u012f\u0133\u013b")
        buf.write("\u0141\u014a\u014d\u0151\u0154\u0158\u015b\u015d\u0161")
        buf.write("\u0169\u0172\u0175\u0180\u0183\u0188\u0194\u019a\u019c")
        buf.write("\u01a2\u01a4\u01aa\u01b2\u01b7\u01bf\u01c2\u01d0\u01d3")
        buf.write("\u01d9\u01dd\u01e7\u01eb\u01ee\u01f2\u01f8\u01fe\u0202")
        buf.write("\u020c\u0212\u0216\u021c\u0220\u022b\u0233\u0239\u0242")
        buf.write("\u0245\u0249\u0252\u0257\u025e\u0265\u026c\u0274\u0279")
        buf.write("\u0281\u0284\u0287\u028e\u0291\u0299\u029c\u02a7\u02ab")
        buf.write("\u02b6\u02bb\u02bd\u02c1\u02c6\u02cd\u02db\u02e4\u02e8")
        buf.write("\u02eb\u02ee\u02f5\u02fa\u02fc\u0301\u030a\u030f\u0319")
        buf.write("\u0323\u0329\u032e\u0333\u0335\u0339\u033c\u0342\u034e")
        buf.write("\u0358\u035b\u0362\u0383\u0385\u0389\u038b\u0390\u0396")
        buf.write("\u039b\u039d\u03a1\u03a4\u03a7\u03ad\u03b0\u03b4\u03b9")
        buf.write("\u03c8\u03d0\u03d7\u03db\u03e2\u03ea\u03ef\u03f7\u03ff")
        buf.write("\u0407\u040c\u0411\u041b\u0424\u042a\u0431\u0433\u0445")
        buf.write("\u0451\u045e\u0466\u0472\u0482\u0488\u048f\u0492\u0495")
        buf.write("\u04a1\u04a6\u04a8\u04ae\u04b5\u04bd\u04c9\u04cd")
        return buf.getvalue()


class SQLFatParser ( Parser ):

    grammarFileName = "SQLFat.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'~'", "'+'", "'-'", "'&'", "'|'", 
                     "'/'", "'%'", "'--'", "'ALL'", "'AND'", "'AS'", "'ASC'", 
                     "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BIT'", "'BLOB'", 
                     "'BOOL'", "'BOOLEAN'", "'BTREE'", "'BY'", "'CHAR'", 
                     "'COLUMNS'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", 
                     "'DATA'", "'DATABASE'", "'DATE'", "'DATETIME'", "'DECIMAL'", 
                     "'DEAFAULT'", "'DELETE'", "'DESC'", "'DISTINCT'", "'DOUBLE'", 
                     "'DROP'", "'DUPLICATE'", "'ENCLOSED'", "'ENUM'", "'ESCAPED'", 
                     "'EXISTS'", "'FALSE'", "'FIELDS'", "'FLOAT'", "'FROM'", 
                     "'FULLTEXT'", "'GROUP'", "'HAVING'", "'HASH'", "'INDEX'", 
                     "'INFILE'", "'IF'", "'IGNORE'", "'IN'", "'INNER'", 
                     "'INSERT'", "'INT'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
                     "'KEYS'", "'LINE'", "'LINES'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LIST'", "'LOAD'", "'LOCAL'", "'NATURAL'", 
                     "'NUMERIC'", "'NOT'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'PARTITION'", "'PARTITIONS'", "'PRIMARY'", "'RANGE'", 
                     "'REAL'", "'REPLACE'", "'RIGHT'", "'ROW'", "'ROWS'", 
                     "'SELECT'", "'SET'", "'STARTING'", "'TABLE'", "'TERMINATED'", 
                     "'TEXT'", "'TIME'", "'TIMESTAMP'", "'TINYINT'", "'TRUNCATE'", 
                     "'TRUE'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", 
                     "'VALUE'", "'VALUES'", "'VARCHAR'", "'VARBINARY'", 
                     "'WHERE'", "'XOR'", "'YEAR'", "'NULL'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':='", "<INVALID>", "'='", 
                     "'>'", "'<'", "'!'", "'.'", "'('", "')'", "','", "';'", 
                     "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ALL", "AND", "AS", "ASC", 
                      "BETWEEN", "BIGINT", "BINARY", "BIT", "BLOB", "BOOL", 
                      "BOOLEAN", "BTREE", "BY", "CHAR", "COLUMNS", "CONSTRAINT", 
                      "CREATE", "CROSS", "DATA", "DATABASE", "DATE", "DATETIME", 
                      "DECIMAL", "DEFAULT", "DELETE", "DESC", "DISTINCT", 
                      "DOUBLE", "DROP", "DUPLICATE", "ENCLOSED", "ENUM", 
                      "ESCAPED", "EXISTS", "FALSE", "FIELDS", "FLOAT", "FROM", 
                      "FULLTEXT", "GROUP", "HAVING", "HASH", "INDEX", "INFILE", 
                      "IF", "IGNORE", "IN", "INNER", "INSERT", "INT", "INTO", 
                      "IS", "JOIN", "KEY", "KEYS", "LINE", "LINES", "LEFT", 
                      "LIKE", "LIMIT", "LIST", "LOAD", "LOCAL", "NATURAL", 
                      "NUMERIC", "NOT", "ON", "OR", "ORDER", "OUTER", "PARTITION", 
                      "PARTITIONS", "PRIMARY", "RANGE", "REAL", "REPLACE", 
                      "RIGHT", "ROW", "ROWS", "SELECT", "SET", "STARTING", 
                      "TABLE", "TERMINATED", "TEXT", "TIME", "TIMESTAMP", 
                      "TINYINT", "TRUNCATE", "TRUE", "UNION", "UNIQUE", 
                      "UPDATE", "USING", "VALUE", "VALUES", "VARCHAR", "VARBINARY", 
                      "WHERE", "XOR", "YEAR", "NULL_LITERAL", "ID", "DOT_ID", 
                      "DECIMAL_LITERAL", "REAL_LITERAL", "STRING_LITERAL", 
                      "NULL_SPEC_LITERAL", "LOCAL_ID", "VAR_ASSIGN", "SPACE", 
                      "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                      "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                      "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                      "COLON_SYMB" ]

    RULE_sqlStatement = 0
    RULE_ddlStatement = 1
    RULE_dmlStatement = 2
    RULE_selectStatement = 3
    RULE_querySpecification = 4
    RULE_queryExpression = 5
    RULE_queryExpressionNointo = 6
    RULE_querySpecificationNointo = 7
    RULE_unionStatement = 8
    RULE_unionParenthesis = 9
    RULE_selectSpec = 10
    RULE_selectElements = 11
    RULE_selectElement = 12
    RULE_insertStatement = 13
    RULE_loadDataStatement = 14
    RULE_insertStatementValue = 15
    RULE_updatedElement = 16
    RULE_deleteStatement = 17
    RULE_singleDeleteStatement = 18
    RULE_multipleDeleteStatement = 19
    RULE_selectFieldsInto = 20
    RULE_selectLinesInto = 21
    RULE_fromClause = 22
    RULE_orderByClause = 23
    RULE_orderByExpression = 24
    RULE_limitClause = 25
    RULE_groupByItem = 26
    RULE_tableSources = 27
    RULE_tableSource = 28
    RULE_tableSourceItem = 29
    RULE_joinPart = 30
    RULE_createDatabase = 31
    RULE_dropDatabase = 32
    RULE_ifNotExists = 33
    RULE_ifExists = 34
    RULE_createTable = 35
    RULE_dropTable = 36
    RULE_tables = 37
    RULE_truncateTable = 38
    RULE_createDefinitions = 39
    RULE_createDefinition = 40
    RULE_columnDefinition = 41
    RULE_columnConstraint = 42
    RULE_indexColumnDefinition = 43
    RULE_indexType = 44
    RULE_indexColumnNames = 45
    RULE_indexColumnName = 46
    RULE_partitionDefinitions = 47
    RULE_partitionFunctionDefinition = 48
    RULE_tableConstraint = 49
    RULE_createIndex = 50
    RULE_dropIndex = 51
    RULE_functionCall = 52
    RULE_functionArgs = 53
    RULE_functionArg = 54
    RULE_expression = 55
    RULE_expressions = 56
    RULE_expressionsWithDefaults = 57
    RULE_expressionOrDefault = 58
    RULE_predicate = 59
    RULE_expressionAtom = 60
    RULE_unaryOperator = 61
    RULE_logicalOperator = 62
    RULE_comparisonOperator = 63
    RULE_mathOperator = 64
    RULE_assignmentField = 65
    RULE_constant = 66
    RULE_nullNotnull = 67
    RULE_decimalLiteral = 68
    RULE_booleanLiteral = 69
    RULE_fullId = 70
    RULE_fullColumnName = 71
    RULE_tableName = 72
    RULE_uid = 73
    RULE_uidList = 74
    RULE_dataTypeBase = 75
    RULE_dottedId = 76
    RULE_stringLiteral = 77
    RULE_dataType = 78

    ruleNames =  [ "sqlStatement", "ddlStatement", "dmlStatement", "selectStatement", 
                   "querySpecification", "queryExpression", "queryExpressionNointo", 
                   "querySpecificationNointo", "unionStatement", "unionParenthesis", 
                   "selectSpec", "selectElements", "selectElement", "insertStatement", 
                   "loadDataStatement", "insertStatementValue", "updatedElement", 
                   "deleteStatement", "singleDeleteStatement", "multipleDeleteStatement", 
                   "selectFieldsInto", "selectLinesInto", "fromClause", 
                   "orderByClause", "orderByExpression", "limitClause", 
                   "groupByItem", "tableSources", "tableSource", "tableSourceItem", 
                   "joinPart", "createDatabase", "dropDatabase", "ifNotExists", 
                   "ifExists", "createTable", "dropTable", "tables", "truncateTable", 
                   "createDefinitions", "createDefinition", "columnDefinition", 
                   "columnConstraint", "indexColumnDefinition", "indexType", 
                   "indexColumnNames", "indexColumnName", "partitionDefinitions", 
                   "partitionFunctionDefinition", "tableConstraint", "createIndex", 
                   "dropIndex", "functionCall", "functionArgs", "functionArg", 
                   "expression", "expressions", "expressionsWithDefaults", 
                   "expressionOrDefault", "predicate", "expressionAtom", 
                   "unaryOperator", "logicalOperator", "comparisonOperator", 
                   "mathOperator", "assignmentField", "constant", "nullNotnull", 
                   "decimalLiteral", "booleanLiteral", "fullId", "fullColumnName", 
                   "tableName", "uid", "uidList", "dataTypeBase", "dottedId", 
                   "stringLiteral", "dataType" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    ALL=10
    AND=11
    AS=12
    ASC=13
    BETWEEN=14
    BIGINT=15
    BINARY=16
    BIT=17
    BLOB=18
    BOOL=19
    BOOLEAN=20
    BTREE=21
    BY=22
    CHAR=23
    COLUMNS=24
    CONSTRAINT=25
    CREATE=26
    CROSS=27
    DATA=28
    DATABASE=29
    DATE=30
    DATETIME=31
    DECIMAL=32
    DEFAULT=33
    DELETE=34
    DESC=35
    DISTINCT=36
    DOUBLE=37
    DROP=38
    DUPLICATE=39
    ENCLOSED=40
    ENUM=41
    ESCAPED=42
    EXISTS=43
    FALSE=44
    FIELDS=45
    FLOAT=46
    FROM=47
    FULLTEXT=48
    GROUP=49
    HAVING=50
    HASH=51
    INDEX=52
    INFILE=53
    IF=54
    IGNORE=55
    IN=56
    INNER=57
    INSERT=58
    INT=59
    INTO=60
    IS=61
    JOIN=62
    KEY=63
    KEYS=64
    LINE=65
    LINES=66
    LEFT=67
    LIKE=68
    LIMIT=69
    LIST=70
    LOAD=71
    LOCAL=72
    NATURAL=73
    NUMERIC=74
    NOT=75
    ON=76
    OR=77
    ORDER=78
    OUTER=79
    PARTITION=80
    PARTITIONS=81
    PRIMARY=82
    RANGE=83
    REAL=84
    REPLACE=85
    RIGHT=86
    ROW=87
    ROWS=88
    SELECT=89
    SET=90
    STARTING=91
    TABLE=92
    TERMINATED=93
    TEXT=94
    TIME=95
    TIMESTAMP=96
    TINYINT=97
    TRUNCATE=98
    TRUE=99
    UNION=100
    UNIQUE=101
    UPDATE=102
    USING=103
    VALUE=104
    VALUES=105
    VARCHAR=106
    VARBINARY=107
    WHERE=108
    XOR=109
    YEAR=110
    NULL_LITERAL=111
    ID=112
    DOT_ID=113
    DECIMAL_LITERAL=114
    REAL_LITERAL=115
    STRING_LITERAL=116
    NULL_SPEC_LITERAL=117
    LOCAL_ID=118
    VAR_ASSIGN=119
    SPACE=120
    EQUAL_SYMBOL=121
    GREATER_SYMBOL=122
    LESS_SYMBOL=123
    EXCLAMATION_SYMBOL=124
    DOT=125
    LR_BRACKET=126
    RR_BRACKET=127
    COMMA=128
    SEMI=129
    AT_SIGN=130
    ZERO_DECIMAL=131
    ONE_DECIMAL=132
    TWO_DECIMAL=133
    SINGLE_QUOTE_SYMB=134
    DOUBLE_QUOTE_SYMB=135
    REVERSE_QUOTE_SYMB=136
    COLON_SYMB=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DmlStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = SQLFatParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sqlStatement)
        try:
            self.state = 160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.CREATE, SQLFatParser.DROP, SQLFatParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                self.ddlStatement()
                pass
            elif token in [SQLFatParser.DELETE, SQLFatParser.INSERT, SQLFatParser.LOAD, SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.dmlStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(SQLFatParser.CreateTableContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(SQLFatParser.CreateIndexContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(SQLFatParser.DropDatabaseContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(SQLFatParser.DropIndexContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(SQLFatParser.DropTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(SQLFatParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = SQLFatParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_ddlStatement)
        try:
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 163
                self.createTable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 164
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 165
                self.dropDatabase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 166
                self.dropIndex()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 167
                self.dropTable()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 168
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(SQLFatParser.InsertStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DeleteStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(SQLFatParser.LoadDataStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = SQLFatParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dmlStatement)
        try:
            self.state = 175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 171
                self.selectStatement()
                pass
            elif token in [SQLFatParser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 172
                self.insertStatement()
                pass
            elif token in [SQLFatParser.DELETE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 173
                self.deleteStatement()
                pass
            elif token in [SQLFatParser.LOAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 174
                self.loadDataStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = SQLFatParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 177
                self.querySpecification()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self.queryExpression()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 179
                self.querySpecificationNointo()
                self.state = 181 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 180
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 183 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.UNION:
                    self.state = 185
                    self.match(SQLFatParser.UNION)
                    self.state = 187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                        self.state = 186
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 191
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLFatParser.SELECT]:
                        self.state = 189
                        self.querySpecification()
                        pass
                    elif token in [SQLFatParser.LR_BRACKET]:
                        self.state = 190
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.ORDER:
                    self.state = 195
                    self.orderByClause()


                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LIMIT:
                    self.state = 198
                    self.limitClause()


                pass

            elif la_ == 4:
                localctx = SQLFatParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.queryExpressionNointo()
                self.state = 203 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 202
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 205 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.UNION:
                    self.state = 207
                    self.match(SQLFatParser.UNION)
                    self.state = 209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                        self.state = 208
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 211
                    self.queryExpression()


                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.ORDER:
                    self.state = 214
                    self.orderByClause()


                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LIMIT:
                    self.state = 217
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLFatParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SQLFatParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SQLFatParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SQLFatParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 222
                self.match(SQLFatParser.SELECT)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                    self.state = 223
                    self.selectSpec()
                    self.state = 228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 229
                self.selectElements()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.FROM:
                    self.state = 230
                    self.fromClause()


                self.state = 234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 233
                    self.orderByClause()


                self.state = 237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 236
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.match(SQLFatParser.SELECT)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                    self.state = 240
                    self.selectSpec()
                    self.state = 245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 246
                self.selectElements()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.FROM:
                    self.state = 247
                    self.fromClause()


                self.state = 251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 250
                    self.orderByClause()


                self.state = 254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 253
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = SQLFatParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_queryExpression)
        try:
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 259
                self.querySpecification()
                self.state = 260
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 263
                self.queryExpression()
                self.state = 264
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = SQLFatParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_queryExpressionNointo)
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 269
                self.querySpecificationNointo()
                self.state = 270
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 273
                self.queryExpressionNointo()
                self.state = 274
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLFatParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SQLFatParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SQLFatParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = SQLFatParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(SQLFatParser.SELECT)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 279
                self.selectSpec()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 285
            self.selectElements()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.FROM:
                self.state = 286
                self.fromClause()


            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 289
                self.orderByClause()


            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 292
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = SQLFatParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(SQLFatParser.UNION)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 296
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT]:
                self.state = 299
                self.querySpecificationNointo()
                pass
            elif token in [SQLFatParser.LR_BRACKET]:
                self.state = 300
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = SQLFatParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(SQLFatParser.UNION)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 304
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 307
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = SQLFatParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectElementContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = SQLFatParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__0]:
                self.state = 311
                localctx.star = self.match(SQLFatParser.T__0)
                pass
            elif token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.state = 312
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 315
                self.match(SQLFatParser.COMMA)
                self.state = 316
                self.selectElement()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = SQLFatParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.fullId()
                self.state = 323
                self.match(SQLFatParser.DOT)
                self.state = 324
                self.match(SQLFatParser.T__0)
                pass

            elif la_ == 2:
                localctx = SQLFatParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.fullColumnName()
                self.state = 331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 327
                        self.match(SQLFatParser.AS)


                    self.state = 330
                    self.uid()


                pass

            elif la_ == 3:
                localctx = SQLFatParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.functionCall()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 334
                        self.match(SQLFatParser.AS)


                    self.state = 337
                    self.uid()


                pass

            elif la_ == 4:
                localctx = SQLFatParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 340
                self.expression(0)
                self.state = 345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 341
                        self.match(SQLFatParser.AS)


                    self.state = 344
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(SQLFatParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SQLFatParser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(SQLFatParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def IGNORE(self):
            return self.getToken(SQLFatParser.IGNORE, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(SQLFatParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(SQLFatParser.UPDATE, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = SQLFatParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(SQLFatParser.INSERT)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IGNORE:
                self.state = 350
                self.match(SQLFatParser.IGNORE)


            self.state = 353
            self.match(SQLFatParser.INTO)
            self.state = 354
            self.tableName()
            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.VALUE, SQLFatParser.VALUES, SQLFatParser.LR_BRACKET]:
                self.state = 359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 355
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 356
                    localctx.columns = self.uidList()
                    self.state = 357
                    self.match(SQLFatParser.RR_BRACKET)


                self.state = 361
                self.insertStatementValue()
                pass
            elif token in [SQLFatParser.SET]:
                self.state = 362
                self.match(SQLFatParser.SET)
                self.state = 363
                localctx.setFirst = self.updatedElement()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 364
                    self.match(SQLFatParser.COMMA)
                    self.state = 365
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ON:
                self.state = 373
                self.match(SQLFatParser.ON)
                self.state = 374
                self.match(SQLFatParser.DUPLICATE)
                self.state = 375
                self.match(SQLFatParser.KEY)
                self.state = 376
                self.match(SQLFatParser.UPDATE)
                self.state = 377
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 378
                    self.match(SQLFatParser.COMMA)
                    self.state = 379
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadDataStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.filename = None # Token
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(SQLFatParser.LOAD, 0)

        def DATA(self):
            return self.getToken(SQLFatParser.DATA, 0)

        def INFILE(self):
            return self.getToken(SQLFatParser.INFILE, 0)

        def INTO(self):
            return self.getToken(SQLFatParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(SQLFatParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(SQLFatParser.LINES)
            else:
                return self.getToken(SQLFatParser.LINES, i)

        def IGNORE(self):
            return self.getToken(SQLFatParser.IGNORE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.AssignmentFieldContext,i)


        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UpdatedElementContext,i)


        def FIELDS(self):
            return self.getToken(SQLFatParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(SQLFatParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(SQLFatParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectLinesIntoContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = SQLFatParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(SQLFatParser.LOAD)
            self.state = 388
            self.match(SQLFatParser.DATA)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LOCAL:
                self.state = 389
                self.match(SQLFatParser.LOCAL)


            self.state = 392
            self.match(SQLFatParser.INFILE)
            self.state = 393
            localctx.filename = self.match(SQLFatParser.STRING_LITERAL)
            self.state = 394
            self.match(SQLFatParser.INTO)
            self.state = 395
            self.match(SQLFatParser.TABLE)
            self.state = 396
            self.tableName()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITION:
                self.state = 397
                self.match(SQLFatParser.PARTITION)
                self.state = 398
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 399
                self.uidList()
                self.state = 400
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.COLUMNS or _la==SQLFatParser.FIELDS:
                self.state = 404
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.COLUMNS or _la==SQLFatParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 405
                    self.selectFieldsInto()
                    self.state = 408 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (SQLFatParser.ENCLOSED - 40)) | (1 << (SQLFatParser.ESCAPED - 40)) | (1 << (SQLFatParser.TERMINATED - 40)))) != 0)):
                        break



            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LINES:
                self.state = 412
                self.match(SQLFatParser.LINES)
                self.state = 414 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 413
                    self.selectLinesInto()
                    self.state = 416 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLFatParser.STARTING or _la==SQLFatParser.TERMINATED):
                        break



            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IGNORE:
                self.state = 420
                self.match(SQLFatParser.IGNORE)
                self.state = 421
                self.decimalLiteral()
                self.state = 422
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.LINES or _la==SQLFatParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LR_BRACKET:
                self.state = 426
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 427
                self.assignmentField()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 428
                    self.match(SQLFatParser.COMMA)
                    self.state = 429
                    self.assignmentField()
                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 435
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.SET:
                self.state = 439
                self.match(SQLFatParser.SET)
                self.state = 440
                self.updatedElement()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 441
                    self.match(SQLFatParser.COMMA)
                    self.state = 442
                    self.updatedElement()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionsWithDefaultsContext,i)


        def VALUES(self):
            return self.getToken(SQLFatParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(SQLFatParser.VALUE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = SQLFatParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.selectStatement()
                pass
            elif token in [SQLFatParser.VALUE, SQLFatParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.VALUE or _la==SQLFatParser.VALUES):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 452
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 453
                self.expressionsWithDefaults()
                self.state = 454
                self.match(SQLFatParser.RR_BRACKET)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 455
                    self.match(SQLFatParser.COMMA)
                    self.state = 456
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 457
                    self.expressionsWithDefaults()
                    self.state = 458
                    self.match(SQLFatParser.RR_BRACKET)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SQLFatParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = SQLFatParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.fullColumnName()
            self.state = 468
            self.match(SQLFatParser.EQUAL_SYMBOL)
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.state = 469
                self.expression(0)
                pass
            elif token in [SQLFatParser.DEFAULT]:
                self.state = 470
                self.match(SQLFatParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = SQLFatParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_deleteStatement)
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLFatParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(SQLFatParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = SQLFatParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(SQLFatParser.DELETE)
            self.state = 478
            self.match(SQLFatParser.FROM)
            self.state = 479
            self.tableName()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITION:
                self.state = 480
                self.match(SQLFatParser.PARTITION)
                self.state = 481
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 482
                self.uidList()
                self.state = 483
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 487
                self.match(SQLFatParser.WHERE)
                self.state = 488
                self.expression(0)


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ORDER:
                self.state = 491
                self.orderByClause()


            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LIMIT:
                self.state = 494
                self.match(SQLFatParser.LIMIT)
                self.state = 495
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLFatParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)

        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = SQLFatParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(SQLFatParser.DELETE)
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                self.state = 499
                self.tableName()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.DOT:
                    self.state = 500
                    self.match(SQLFatParser.DOT)
                    self.state = 501
                    self.match(SQLFatParser.T__0)


                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 504
                    self.match(SQLFatParser.COMMA)
                    self.state = 505
                    self.tableName()
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.DOT:
                        self.state = 506
                        self.match(SQLFatParser.DOT)
                        self.state = 507
                        self.match(SQLFatParser.T__0)


                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 515
                self.match(SQLFatParser.FROM)
                self.state = 516
                self.tableSources()
                pass
            elif token in [SQLFatParser.FROM]:
                self.state = 518
                self.match(SQLFatParser.FROM)
                self.state = 519
                self.tableName()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.DOT:
                    self.state = 520
                    self.match(SQLFatParser.DOT)
                    self.state = 521
                    self.match(SQLFatParser.T__0)


                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 524
                    self.match(SQLFatParser.COMMA)
                    self.state = 525
                    self.tableName()
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.DOT:
                        self.state = 526
                        self.match(SQLFatParser.DOT)
                        self.state = 527
                        self.match(SQLFatParser.T__0)


                    self.state = 534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 535
                self.match(SQLFatParser.USING)
                self.state = 536
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 540
                self.match(SQLFatParser.WHERE)
                self.state = 541
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectFieldsIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(SQLFatParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(SQLFatParser.ENCLOSED, 0)

        def ESCAPED(self):
            return self.getToken(SQLFatParser.ESCAPED, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = SQLFatParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_selectFieldsInto)
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.match(SQLFatParser.TERMINATED)
                self.state = 545
                self.match(SQLFatParser.BY)
                self.state = 546
                localctx.terminationField = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.ENCLOSED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.match(SQLFatParser.ENCLOSED)
                self.state = 548
                self.match(SQLFatParser.BY)
                self.state = 549
                localctx.enclosion = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.match(SQLFatParser.ESCAPED)
                self.state = 551
                self.match(SQLFatParser.BY)
                self.state = 552
                localctx.escaping = self.match(SQLFatParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectLinesIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(SQLFatParser.STARTING, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(SQLFatParser.TERMINATED, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = SQLFatParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_selectLinesInto)
        try:
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.match(SQLFatParser.STARTING)
                self.state = 556
                self.match(SQLFatParser.BY)
                self.state = 557
                localctx.starting = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.match(SQLFatParser.TERMINATED)
                self.state = 559
                self.match(SQLFatParser.BY)
                self.state = 560
                localctx.terminationLine = self.match(SQLFatParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SQLFatParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(SQLFatParser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SQLFatParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(SQLFatParser.FROM)
            self.state = 564
            self.tableSources()
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 565
                self.match(SQLFatParser.WHERE)
                self.state = 566
                localctx.whereExpr = self.expression(0)


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.GROUP:
                self.state = 569
                self.match(SQLFatParser.GROUP)
                self.state = 570
                self.match(SQLFatParser.BY)
                self.state = 571
                self.groupByItem()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 572
                    self.match(SQLFatParser.COMMA)
                    self.state = 573
                    self.groupByItem()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.HAVING:
                self.state = 581
                self.match(SQLFatParser.HAVING)
                self.state = 582
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLFatParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.OrderByExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = SQLFatParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(SQLFatParser.ORDER)
            self.state = 586
            self.match(SQLFatParser.BY)
            self.state = 587
            self.orderByExpression()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 588
                self.match(SQLFatParser.COMMA)
                self.state = 589
                self.orderByExpression()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = SQLFatParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.expression(0)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 596
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(SQLFatParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = SQLFatParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(SQLFatParser.LIMIT)

            self.state = 600
            localctx.limit = self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = SQLFatParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.expression(0)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 603
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableSourceContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = SQLFatParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.tableSource()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 607
                self.match(SQLFatParser.COMMA)
                self.state = 608
                self.tableSource()
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = SQLFatParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.tableSourceItem()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (SQLFatParser.CROSS - 27)) | (1 << (SQLFatParser.INNER - 27)) | (1 << (SQLFatParser.JOIN - 27)) | (1 << (SQLFatParser.LEFT - 27)) | (1 << (SQLFatParser.NATURAL - 27)) | (1 << (SQLFatParser.RIGHT - 27)))) != 0):
                    self.state = 615
                    self.joinPart()
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SQLFatParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 622
                self.tableSourceItem()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (SQLFatParser.CROSS - 27)) | (1 << (SQLFatParser.INNER - 27)) | (1 << (SQLFatParser.JOIN - 27)) | (1 << (SQLFatParser.LEFT - 27)) | (1 << (SQLFatParser.NATURAL - 27)) | (1 << (SQLFatParser.RIGHT - 27)))) != 0):
                    self.state = 623
                    self.joinPart()
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 629
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = SQLFatParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.tableName()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 634
                    self.match(SQLFatParser.PARTITION)
                    self.state = 635
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 636
                    self.uidList()
                    self.state = 637
                    self.match(SQLFatParser.RR_BRACKET)


                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 641
                        self.match(SQLFatParser.AS)


                    self.state = 644
                    localctx.alias = self.uid()


                pass

            elif la_ == 2:
                localctx = SQLFatParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 647
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 648
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 649
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 650
                    self.match(SQLFatParser.RR_BRACKET)
                    pass


                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.AS:
                    self.state = 654
                    self.match(SQLFatParser.AS)


                self.state = 657
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 660
                self.tableSources()
                self.state = 661
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def INNER(self):
            return self.getToken(SQLFatParser.INNER, 0)
        def CROSS(self):
            return self.getToken(SQLFatParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(SQLFatParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SQLFatParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SQLFatParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(SQLFatParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SQLFatParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SQLFatParser.RIGHT, 0)
        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def OUTER(self):
            return self.getToken(SQLFatParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)



    def joinPart(self):

        localctx = SQLFatParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.CROSS, SQLFatParser.INNER, SQLFatParser.JOIN]:
                localctx = SQLFatParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CROSS or _la==SQLFatParser.INNER:
                    self.state = 665
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.CROSS or _la==SQLFatParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 668
                self.match(SQLFatParser.JOIN)
                self.state = 669
                self.tableSourceItem()
                self.state = 677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.match(SQLFatParser.ON)
                    self.state = 671
                    self.expression(0)

                elif la_ == 2:
                    self.state = 672
                    self.match(SQLFatParser.USING)
                    self.state = 673
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 674
                    self.uidList()
                    self.state = 675
                    self.match(SQLFatParser.RR_BRACKET)


                pass
            elif token in [SQLFatParser.LEFT, SQLFatParser.RIGHT]:
                localctx = SQLFatParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.OUTER:
                    self.state = 680
                    self.match(SQLFatParser.OUTER)


                self.state = 683
                self.match(SQLFatParser.JOIN)
                self.state = 684
                self.tableSourceItem()
                self.state = 692
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLFatParser.ON]:
                    self.state = 685
                    self.match(SQLFatParser.ON)
                    self.state = 686
                    self.expression(0)
                    pass
                elif token in [SQLFatParser.USING]:
                    self.state = 687
                    self.match(SQLFatParser.USING)
                    self.state = 688
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 689
                    self.uidList()
                    self.state = 690
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SQLFatParser.NATURAL]:
                localctx = SQLFatParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 694
                self.match(SQLFatParser.NATURAL)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT:
                    self.state = 695
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.OUTER:
                        self.state = 696
                        self.match(SQLFatParser.OUTER)




                self.state = 701
                self.match(SQLFatParser.JOIN)
                self.state = 702
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SQLFatParser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = SQLFatParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(SQLFatParser.CREATE)
            self.state = 706
            self.match(SQLFatParser.DATABASE)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 707
                self.ifNotExists()


            self.state = 710
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(SQLFatParser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = SQLFatParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SQLFatParser.DROP)
            self.state = 713
            self.match(SQLFatParser.DATABASE)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 714
                self.ifExists()


            self.state = 717
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLFatParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = SQLFatParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SQLFatParser.IF)
            self.state = 720
            self.match(SQLFatParser.NOT)
            self.state = 721
            self.match(SQLFatParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLFatParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = SQLFatParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(SQLFatParser.IF)
            self.state = 724
            self.match(SQLFatParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(SQLFatParser.LIKE, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDefinitionsContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionDefinitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDefinitionsContext,0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = SQLFatParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.match(SQLFatParser.CREATE)
                self.state = 727
                self.match(SQLFatParser.TABLE)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 728
                    self.ifNotExists()


                self.state = 731
                self.tableName()

                self.state = 732
                self.match(SQLFatParser.LIKE)
                self.state = 733
                self.tableName()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.match(SQLFatParser.CREATE)
                self.state = 736
                self.match(SQLFatParser.TABLE)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 737
                    self.ifNotExists()


                self.state = 740
                self.tableName()
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 741
                    self.createDefinitions()


                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 744
                    self.partitionDefinitions()


                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.AS:
                    self.state = 747
                    self.match(SQLFatParser.AS)


                self.state = 750
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.match(SQLFatParser.CREATE)
                self.state = 753
                self.match(SQLFatParser.TABLE)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 754
                    self.ifNotExists()


                self.state = 757
                self.tableName()
                self.state = 758
                self.createDefinitions()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 759
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SQLFatParser.TablesContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = SQLFatParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(SQLFatParser.DROP)
            self.state = 765
            self.match(SQLFatParser.TABLE)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 766
                self.ifExists()


            self.state = 769
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = SQLFatParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.tableName()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 772
                self.match(SQLFatParser.COMMA)
                self.state = 773
                self.tableName()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TruncateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(SQLFatParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = SQLFatParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(SQLFatParser.TRUNCATE)
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.TABLE:
                self.state = 780
                self.match(SQLFatParser.TABLE)


            self.state = 783
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.CreateDefinitionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = SQLFatParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 786
            self.createDefinition()
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 787
                self.match(SQLFatParser.COMMA)
                self.state = 788
                self.createDefinition()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 794
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(SQLFatParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = SQLFatParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createDefinition)
        try:
            self.state = 801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                localctx = SQLFatParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.uid()
                self.state = 797
                self.columnDefinition()
                pass
            elif token in [SQLFatParser.CONSTRAINT, SQLFatParser.PRIMARY, SQLFatParser.UNIQUE]:
                localctx = SQLFatParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.tableConstraint()
                pass
            elif token in [SQLFatParser.INDEX, SQLFatParser.KEY]:
                localctx = SQLFatParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 800
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SQLFatParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = SQLFatParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.dataType()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (SQLFatParser.KEY - 63)) | (1 << (SQLFatParser.NOT - 63)) | (1 << (SQLFatParser.PRIMARY - 63)) | (1 << (SQLFatParser.UNIQUE - 63)) | (1 << (SQLFatParser.NULL_LITERAL - 63)) | (1 << (SQLFatParser.NULL_SPEC_LITERAL - 63)))) != 0):
                self.state = 804
                self.columnConstraint()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(SQLFatParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(SQLFatParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)



    def columnConstraint(self):

        localctx = SQLFatParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.NOT, SQLFatParser.NULL_LITERAL, SQLFatParser.NULL_SPEC_LITERAL]:
                localctx = SQLFatParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.nullNotnull()
                pass
            elif token in [SQLFatParser.KEY, SQLFatParser.PRIMARY]:
                localctx = SQLFatParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PRIMARY:
                    self.state = 811
                    self.match(SQLFatParser.PRIMARY)


                self.state = 814
                self.match(SQLFatParser.KEY)
                pass
            elif token in [SQLFatParser.UNIQUE]:
                localctx = SQLFatParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 815
                self.match(SQLFatParser.UNIQUE)
                self.state = 817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 816
                    self.match(SQLFatParser.KEY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = SQLFatParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            localctx = SQLFatParser.SimpleIndexDeclarationContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            localctx.indexFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.INDEX or _la==SQLFatParser.KEY):
                localctx.indexFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                self.state = 822
                self.uid()


            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.USING:
                self.state = 825
                self.indexType()


            self.state = 828
            self.indexColumnNames()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.USING:
                self.state = 829
                self.indexType()
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)

        def BTREE(self):
            return self.getToken(SQLFatParser.BTREE, 0)

        def HASH(self):
            return self.getToken(SQLFatParser.HASH, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = SQLFatParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(SQLFatParser.USING)
            self.state = 836
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.BTREE or _la==SQLFatParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexColumnNameContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = SQLFatParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 839
            self.indexColumnName()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 840
                self.match(SQLFatParser.COMMA)
                self.state = 841
                self.indexColumnName()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 847
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = SQLFatParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.uid()
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LR_BRACKET:
                self.state = 850
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 851
                self.decimalLiteral()
                self.state = 852
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 856
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(SQLFatParser.PARTITIONS, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = SQLFatParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(SQLFatParser.PARTITION)
            self.state = 860
            self.match(SQLFatParser.BY)
            self.state = 861
            self.partitionFunctionDefinition()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITIONS:
                self.state = 862
                self.match(SQLFatParser.PARTITIONS)
                self.state = 863
                localctx.count = self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.func = None # ExpressionContext
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(SQLFatParser.HASH, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(SQLFatParser.LIST, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def COLUMNS(self):
            return self.getToken(SQLFatParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(SQLFatParser.RANGE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = SQLFatParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partitionFunctionDefinition)
        try:
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.HASH]:
                localctx = SQLFatParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.match(SQLFatParser.HASH)
                self.state = 867
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 868
                self.expression(0)
                self.state = 869
                self.match(SQLFatParser.COMMA)
                self.state = 870
                localctx.func = self.expression(0)
                self.state = 871
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.KEY]:
                localctx = SQLFatParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.match(SQLFatParser.KEY)
                self.state = 874
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 875
                self.uidList()
                self.state = 876
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.RANGE]:
                localctx = SQLFatParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 878
                self.match(SQLFatParser.RANGE)
                self.state = 879
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 880
                self.expression(0)
                self.state = 881
                self.match(SQLFatParser.COMMA)
                self.state = 882
                localctx.low = self.expression(0)
                self.state = 883
                self.match(SQLFatParser.COMMA)
                self.state = 884
                localctx.high = self.expression(0)
                self.state = 885
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.LIST]:
                localctx = SQLFatParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.match(SQLFatParser.LIST)
                self.state = 897
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLFatParser.LR_BRACKET]:
                    self.state = 888
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 889
                    self.expression(0)
                    self.state = 890
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                elif token in [SQLFatParser.COLUMNS]:
                    self.state = 892
                    self.match(SQLFatParser.COLUMNS)
                    self.state = 893
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 894
                    self.uidList()
                    self.state = 895
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SQLFatParser.CONSTRAINT, 0)
        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(SQLFatParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SQLFatParser.CONSTRAINT, 0)
        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = SQLFatParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CONSTRAINT:
                    self.state = 901
                    self.match(SQLFatParser.CONSTRAINT)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                        self.state = 902
                        localctx.name = self.uid()




                self.state = 907
                self.match(SQLFatParser.PRIMARY)
                self.state = 908
                self.match(SQLFatParser.KEY)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.USING:
                    self.state = 909
                    self.indexType()


                self.state = 912
                self.indexColumnNames()
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.USING:
                    self.state = 913
                    self.indexType()
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SQLFatParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CONSTRAINT:
                    self.state = 919
                    self.match(SQLFatParser.CONSTRAINT)
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                        self.state = 920
                        localctx.name = self.uid()




                self.state = 925
                self.match(SQLFatParser.UNIQUE)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.INDEX or _la==SQLFatParser.KEY:
                    self.state = 926
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.INDEX or _la==SQLFatParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                    self.state = 929
                    localctx.index = self.uid()


                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.USING:
                    self.state = 932
                    self.indexType()


                self.state = 935
                self.indexColumnNames()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.USING:
                    self.state = 936
                    self.indexType()
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexCategory = None # Token

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,0)


        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(SQLFatParser.FULLTEXT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = SQLFatParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(SQLFatParser.CREATE)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.FULLTEXT or _la==SQLFatParser.UNIQUE:
                self.state = 945
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.FULLTEXT or _la==SQLFatParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 948
            self.match(SQLFatParser.INDEX)
            self.state = 949
            self.uid()
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.USING:
                self.state = 950
                self.indexType()


            self.state = 953
            self.match(SQLFatParser.ON)
            self.state = 954
            self.tableName()
            self.state = 955
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = SQLFatParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(SQLFatParser.DROP)
            self.state = 958
            self.match(SQLFatParser.INDEX)
            self.state = 959
            self.uid()
            self.state = 960
            self.match(SQLFatParser.ON)
            self.state = 961
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)



    def functionCall(self):

        localctx = SQLFatParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            localctx = SQLFatParser.UdfFunctionCallContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.fullId()
            self.state = 964
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__1) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3) | (1 << SQLFatParser.BINARY) | (1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM) | (1 << SQLFatParser.EXISTS) | (1 << SQLFatParser.FALSE))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLFatParser.NOT - 75)) | (1 << (SQLFatParser.ROW - 75)) | (1 << (SQLFatParser.TEXT - 75)) | (1 << (SQLFatParser.TIME - 75)) | (1 << (SQLFatParser.TIMESTAMP - 75)) | (1 << (SQLFatParser.TRUE - 75)) | (1 << (SQLFatParser.YEAR - 75)) | (1 << (SQLFatParser.NULL_LITERAL - 75)) | (1 << (SQLFatParser.ID - 75)) | (1 << (SQLFatParser.DECIMAL_LITERAL - 75)) | (1 << (SQLFatParser.REAL_LITERAL - 75)) | (1 << (SQLFatParser.STRING_LITERAL - 75)) | (1 << (SQLFatParser.NULL_SPEC_LITERAL - 75)) | (1 << (SQLFatParser.LOCAL_ID - 75)) | (1 << (SQLFatParser.EXCLAMATION_SYMBOL - 75)) | (1 << (SQLFatParser.LR_BRACKET - 75)))) != 0):
                self.state = 965
                self.functionArgs()


            self.state = 968
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = SQLFatParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 970
                self.constant()
                pass

            elif la_ == 2:
                self.state = 971
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 972
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 973
                self.expression(0)
                pass


            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 976
                self.match(SQLFatParser.COMMA)
                self.state = 981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 977
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 978
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 979
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 980
                    self.expression(0)
                    pass


                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SQLFatParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = SQLFatParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_functionArg)
        try:
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 991
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SQLFatParser.IS, 0)
        def TRUE(self):
            return self.getToken(SQLFatParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(SQLFatParser.FALSE, 0)
        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(SQLFatParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 995
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.NOT or _la==SQLFatParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 996
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = SQLFatParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 997
                self.predicate(0)
                self.state = 998
                self.match(SQLFatParser.IS)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.NOT:
                    self.state = 999
                    self.match(SQLFatParser.NOT)


                self.state = 1002
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.FALSE or _la==SQLFatParser.TRUE):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1004
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1013
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLFatParser.LogicalExpressionContext(self, SQLFatParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 1007
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1008
                    self.logicalOperator()
                    self.state = 1009
                    self.expression(4) 
                self.state = 1015
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = SQLFatParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.expression(0)
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1017
                self.match(SQLFatParser.COMMA)
                self.state = 1018
                self.expression(0)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionOrDefaultContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = SQLFatParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.expressionOrDefault()
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1025
                self.match(SQLFatParser.COMMA)
                self.state = 1026
                self.expressionOrDefault()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SQLFatParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = SQLFatParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionOrDefault)
        try:
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.expression(0)
                pass
            elif token in [SQLFatParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(SQLFatParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(SQLFatParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SQLFatParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IN(self):
            return self.getToken(SQLFatParser.IN, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(SQLFatParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SQLFatParser.AND, 0)
        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SQLFatParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparasionPredicate" ):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparasionPredicate" ):
                listener.exitBinaryComparasionPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SQLFatParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(SQLFatParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SQLFatParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LOCAL_ID:
                self.state = 1037
                self.match(SQLFatParser.LOCAL_ID)
                self.state = 1038
                self.match(SQLFatParser.VAR_ASSIGN)


            self.state = 1041
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1071
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        localctx = SQLFatParser.BinaryComparasionPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1043
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1044
                        self.comparisonOperator()
                        self.state = 1045
                        localctx.right = self.predicate(4)
                        pass

                    elif la_ == 2:
                        localctx = SQLFatParser.BetweenPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1047
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1049
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLFatParser.NOT:
                            self.state = 1048
                            self.match(SQLFatParser.NOT)


                        self.state = 1051
                        self.match(SQLFatParser.BETWEEN)
                        self.state = 1052
                        self.predicate(0)
                        self.state = 1053
                        self.match(SQLFatParser.AND)
                        self.state = 1054
                        self.predicate(3)
                        pass

                    elif la_ == 3:
                        localctx = SQLFatParser.InPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1056
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1058
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLFatParser.NOT:
                            self.state = 1057
                            self.match(SQLFatParser.NOT)


                        self.state = 1060
                        self.match(SQLFatParser.IN)
                        self.state = 1061
                        self.match(SQLFatParser.LR_BRACKET)
                        self.state = 1064
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                        if la_ == 1:
                            self.state = 1062
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 1063
                            self.expressions()
                            pass


                        self.state = 1066
                        self.match(SQLFatParser.RR_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = SQLFatParser.IsNullPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1068
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1069
                        self.match(SQLFatParser.IS)
                        self.state = 1070
                        self.nullNotnull()
                        pass

             
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(SQLFatParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpessionAtom" ):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpessionAtom" ):
                listener.exitExistsExpessionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SQLFatParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(SQLFatParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SQLFatParser.ROW, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(SQLFatParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1077
                self.constant()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1078
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1079
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = SQLFatParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1080
                self.unaryOperator()
                self.state = 1081
                self.expressionAtom(7)
                pass

            elif la_ == 5:
                localctx = SQLFatParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1083
                self.match(SQLFatParser.BINARY)
                self.state = 1084
                self.expressionAtom(6)
                pass

            elif la_ == 6:
                localctx = SQLFatParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1085
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1086
                self.expression(0)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 1087
                    self.match(SQLFatParser.COMMA)
                    self.state = 1088
                    self.expression(0)
                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1094
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = SQLFatParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1096
                self.match(SQLFatParser.ROW)
                self.state = 1097
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1098
                self.expression(0)
                self.state = 1101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1099
                    self.match(SQLFatParser.COMMA)
                    self.state = 1100
                    self.expression(0)
                    self.state = 1103 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLFatParser.COMMA):
                        break

                self.state = 1105
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = SQLFatParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1107
                self.match(SQLFatParser.EXISTS)
                self.state = 1108
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1109
                self.selectStatement()
                self.state = 1110
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = SQLFatParser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1112
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1113
                self.selectStatement()
                self.state = 1114
                self.match(SQLFatParser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1124
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLFatParser.MathExpressionAtomContext(self, SQLFatParser.ExpressionAtomContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                    self.state = 1118
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1119
                    self.mathOperator()
                    self.state = 1120
                    localctx.right = self.expressionAtom(2) 
                self.state = 1126
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = SQLFatParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__1) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3))) != 0) or _la==SQLFatParser.NOT or _la==SQLFatParser.EXCLAMATION_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(SQLFatParser.AND, 0)

        def XOR(self):
            return self.getToken(SQLFatParser.XOR, 0)

        def OR(self):
            return self.getToken(SQLFatParser.OR, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = SQLFatParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_logicalOperator)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.match(SQLFatParser.AND)
                pass
            elif token in [SQLFatParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.match(SQLFatParser.T__4)
                self.state = 1131
                self.match(SQLFatParser.T__4)
                pass
            elif token in [SQLFatParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1132
                self.match(SQLFatParser.XOR)
                pass
            elif token in [SQLFatParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.match(SQLFatParser.OR)
                pass
            elif token in [SQLFatParser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1134
                self.match(SQLFatParser.T__5)
                self.state = 1135
                self.match(SQLFatParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SQLFatParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_comparisonOperator)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1139
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1140
                self.match(SQLFatParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1141
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1142
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1143
                self.match(SQLFatParser.GREATER_SYMBOL)
                self.state = 1144
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1145
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1146
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1147
                self.match(SQLFatParser.EXCLAMATION_SYMBOL)
                self.state = 1148
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1149
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1150
                self.match(SQLFatParser.EQUAL_SYMBOL)
                self.state = 1151
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = SQLFatParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__0) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3) | (1 << SQLFatParser.T__6) | (1 << SQLFatParser.T__7) | (1 << SQLFatParser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(SQLFatParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = SQLFatParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assignmentField)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.uid()
                pass
            elif token in [SQLFatParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.match(SQLFatParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(SQLFatParser.REAL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = SQLFatParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self.stringLiteral()
                pass
            elif token in [SQLFatParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.decimalLiteral()
                pass
            elif token in [SQLFatParser.FALSE, SQLFatParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1162
                self.booleanLiteral()
                pass
            elif token in [SQLFatParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1163
                self.match(SQLFatParser.REAL_LITERAL)
                pass
            elif token in [SQLFatParser.NOT, SQLFatParser.NULL_LITERAL, SQLFatParser.NULL_SPEC_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.NOT:
                    self.state = 1164
                    self.match(SQLFatParser.NOT)


                self.state = 1167
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.NULL_LITERAL or _la==SQLFatParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = SQLFatParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.NOT:
                self.state = 1170
                self.match(SQLFatParser.NOT)


            self.state = 1173
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.NULL_LITERAL or _la==SQLFatParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(SQLFatParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = SQLFatParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_decimalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(SQLFatParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SQLFatParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SQLFatParser.FALSE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = SQLFatParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.FALSE or _la==SQLFatParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(SQLFatParser.DOT_ID, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = SQLFatParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.uid()
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.match(SQLFatParser.DOT_ID)

            elif la_ == 2:
                self.state = 1181
                self.match(SQLFatParser.DOT)
                self.state = 1182
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.DottedIdContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = SQLFatParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.uid()
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1186
                self.dottedId()
                self.state = 1188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1187
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = SQLFatParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(SQLFatParser.ID, 0)

        def dataTypeBase(self):
            return self.getTypedRuleContext(SQLFatParser.DataTypeBaseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = SQLFatParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_uid)
        try:
            self.state = 1196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.match(SQLFatParser.ID)
                pass
            elif token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.dataTypeBase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = SQLFatParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.uid()
            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1199
                self.match(SQLFatParser.COMMA)
                self.state = 1200
                self.uid()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(SQLFatParser.DATE, 0)

        def TIME(self):
            return self.getToken(SQLFatParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLFatParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SQLFatParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(SQLFatParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(SQLFatParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(SQLFatParser.TEXT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = SQLFatParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(SQLFatParser.DOT_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = SQLFatParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dottedId)
        try:
            self.state = 1211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.match(SQLFatParser.DOT_ID)
                pass
            elif token in [SQLFatParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(SQLFatParser.DOT)
                self.state = 1210
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SQLFatParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(SQLFatParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def CHAR(self):
            return self.getToken(SQLFatParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(SQLFatParser.VARCHAR, 0)

        def TEXT(self):
            return self.getToken(SQLFatParser.TEXT, 0)

        def TINYINT(self):
            return self.getToken(SQLFatParser.TINYINT, 0)

        def INT(self):
            return self.getToken(SQLFatParser.INT, 0)

        def BIGINT(self):
            return self.getToken(SQLFatParser.BIGINT, 0)

        def REAL(self):
            return self.getToken(SQLFatParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(SQLFatParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(SQLFatParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(SQLFatParser.DECIMAL, 0)

        def NUMERIC(self):
            return self.getToken(SQLFatParser.NUMERIC, 0)

        def DATE(self):
            return self.getToken(SQLFatParser.DATE, 0)

        def BLOB(self):
            return self.getToken(SQLFatParser.BLOB, 0)

        def BOOL(self):
            return self.getToken(SQLFatParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(SQLFatParser.BOOLEAN, 0)

        def BIT(self):
            return self.getToken(SQLFatParser.BIT, 0)

        def TIME(self):
            return self.getToken(SQLFatParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLFatParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SQLFatParser.DATETIME, 0)

        def BINARY(self):
            return self.getToken(SQLFatParser.BINARY, 0)

        def VARBINARY(self):
            return self.getToken(SQLFatParser.VARBINARY, 0)

        def YEAR(self):
            return self.getToken(SQLFatParser.YEAR, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLFatParser.STRING_LITERAL)
            else:
                return self.getToken(SQLFatParser.STRING_LITERAL, i)

        def ENUM(self):
            return self.getToken(SQLFatParser.ENUM, 0)

        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = SQLFatParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.BIGINT, SQLFatParser.BINARY, SQLFatParser.BIT, SQLFatParser.BLOB, SQLFatParser.BOOL, SQLFatParser.BOOLEAN, SQLFatParser.CHAR, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.DECIMAL, SQLFatParser.DOUBLE, SQLFatParser.FLOAT, SQLFatParser.INT, SQLFatParser.NUMERIC, SQLFatParser.REAL, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TINYINT, SQLFatParser.VARCHAR, SQLFatParser.VARBINARY, SQLFatParser.YEAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.BIGINT) | (1 << SQLFatParser.BINARY) | (1 << SQLFatParser.BIT) | (1 << SQLFatParser.BLOB) | (1 << SQLFatParser.BOOL) | (1 << SQLFatParser.BOOLEAN) | (1 << SQLFatParser.CHAR) | (1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.DECIMAL) | (1 << SQLFatParser.DOUBLE) | (1 << SQLFatParser.FLOAT) | (1 << SQLFatParser.INT))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLFatParser.NUMERIC - 74)) | (1 << (SQLFatParser.REAL - 74)) | (1 << (SQLFatParser.TEXT - 74)) | (1 << (SQLFatParser.TIME - 74)) | (1 << (SQLFatParser.TIMESTAMP - 74)) | (1 << (SQLFatParser.TINYINT - 74)) | (1 << (SQLFatParser.VARCHAR - 74)) | (1 << (SQLFatParser.VARBINARY - 74)) | (1 << (SQLFatParser.YEAR - 74)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SQLFatParser.ENUM, SQLFatParser.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ENUM or _la==SQLFatParser.SET):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1217
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1218
                self.match(SQLFatParser.STRING_LITERAL)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 1219
                    self.match(SQLFatParser.COMMA)
                    self.state = 1220
                    self.match(SQLFatParser.STRING_LITERAL)
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self.match(SQLFatParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.expression_sempred
        self._predicates[59] = self.predicate_sempred
        self._predicates[60] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         





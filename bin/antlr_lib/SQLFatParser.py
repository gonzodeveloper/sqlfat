# Generated from SQLFat.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008c")
        buf.write("\u04dd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\3\2\3\2\3\2\5\2\u00a8")
        buf.write("\n\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00b3\n\4")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u00b9\n\5\3\6\3\6\5\6\u00bd\n\6\3")
        buf.write("\6\3\6\3\7\3\7\3\7\3\7\6\7\u00c5\n\7\r\7\16\7\u00c6\3")
        buf.write("\7\3\7\5\7\u00cb\n\7\3\7\3\7\5\7\u00cf\n\7\5\7\u00d1\n")
        buf.write("\7\3\7\5\7\u00d4\n\7\3\7\5\7\u00d7\n\7\3\7\3\7\6\7\u00db")
        buf.write("\n\7\r\7\16\7\u00dc\3\7\3\7\5\7\u00e1\n\7\3\7\5\7\u00e4")
        buf.write("\n\7\3\7\5\7\u00e7\n\7\3\7\5\7\u00ea\n\7\5\7\u00ec\n\7")
        buf.write("\3\b\3\b\7\b\u00f0\n\b\f\b\16\b\u00f3\13\b\3\b\3\b\5\b")
        buf.write("\u00f7\n\b\3\b\5\b\u00fa\n\b\3\b\5\b\u00fd\n\b\3\b\3\b")
        buf.write("\7\b\u0101\n\b\f\b\16\b\u0104\13\b\3\b\3\b\5\b\u0108\n")
        buf.write("\b\3\b\5\b\u010b\n\b\3\b\5\b\u010e\n\b\5\b\u0110\n\b\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u011a\n\t\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\5\n\u0124\n\n\3\13\3\13\7\13\u0128")
        buf.write("\n\13\f\13\16\13\u012b\13\13\3\13\3\13\5\13\u012f\n\13")
        buf.write("\3\13\5\13\u0132\n\13\3\13\5\13\u0135\n\13\3\f\3\f\5\f")
        buf.write("\u0139\n\f\3\f\3\f\5\f\u013d\n\f\3\r\3\r\5\r\u0141\n\r")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\5\17\u0149\n\17\3\17\3\17")
        buf.write("\7\17\u014d\n\17\f\17\16\17\u0150\13\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u0158\n\20\3\20\5\20\u015b\n\20\3")
        buf.write("\20\3\20\5\20\u015f\n\20\3\20\5\20\u0162\n\20\3\20\3\20")
        buf.write("\5\20\u0166\n\20\3\20\5\20\u0169\n\20\5\20\u016b\n\20")
        buf.write("\3\21\3\21\5\21\u016f\n\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0177\n\21\3\21\3\21\3\21\3\21\3\21\7\21\u017e")
        buf.write("\n\21\f\21\16\21\u0181\13\21\5\21\u0183\n\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u018c\n\21\f\21\16\21\u018f")
        buf.write("\13\21\5\21\u0191\n\21\3\22\3\22\3\22\5\22\u0196\n\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22")
        buf.write("\u01a2\n\22\3\22\3\22\6\22\u01a6\n\22\r\22\16\22\u01a7")
        buf.write("\5\22\u01aa\n\22\3\22\3\22\6\22\u01ae\n\22\r\22\16\22")
        buf.write("\u01af\5\22\u01b2\n\22\3\22\3\22\3\22\3\22\5\22\u01b8")
        buf.write("\n\22\3\22\3\22\3\22\3\22\7\22\u01be\n\22\f\22\16\22\u01c1")
        buf.write("\13\22\3\22\3\22\5\22\u01c5\n\22\3\22\3\22\3\22\3\22\7")
        buf.write("\22\u01cb\n\22\f\22\16\22\u01ce\13\22\5\22\u01d0\n\22")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23")
        buf.write("\u01dc\n\23\f\23\16\23\u01df\13\23\5\23\u01e1\n\23\3\24")
        buf.write("\3\24\3\24\3\24\5\24\u01e7\n\24\3\25\3\25\5\25\u01eb\n")
        buf.write("\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01f5")
        buf.write("\n\26\3\26\3\26\5\26\u01f9\n\26\3\26\5\26\u01fc\n\26\3")
        buf.write("\26\3\26\5\26\u0200\n\26\3\27\3\27\3\27\3\27\5\27\u0206")
        buf.write("\n\27\3\27\3\27\3\27\3\27\5\27\u020c\n\27\7\27\u020e\n")
        buf.write("\27\f\27\16\27\u0211\13\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u021a\n\27\3\27\3\27\3\27\3\27\5\27\u0220")
        buf.write("\n\27\7\27\u0222\n\27\f\27\16\27\u0225\13\27\3\27\3\27")
        buf.write("\3\27\5\27\u022a\n\27\3\27\3\27\5\27\u022e\n\27\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0239\n\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0241\n\31\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u0247\n\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\7\32\u024e\n\32\f\32\16\32\u0251\13\32\5\32\u0253\n\32")
        buf.write("\3\32\3\32\5\32\u0257\n\32\3\33\3\33\3\33\3\33\3\33\7")
        buf.write("\33\u025e\n\33\f\33\16\33\u0261\13\33\3\34\3\34\5\34\u0265")
        buf.write("\n\34\3\35\3\35\3\35\3\36\3\36\5\36\u026c\n\36\3\37\3")
        buf.write("\37\3\37\7\37\u0271\n\37\f\37\16\37\u0274\13\37\3 \3 ")
        buf.write("\7 \u0278\n \f \16 \u027b\13 \3 \3 \3 \7 \u0280\n \f ")
        buf.write("\16 \u0283\13 \3 \3 \5 \u0287\n \3!\3!\3!\3!\3!\3!\5!")
        buf.write("\u028f\n!\3!\5!\u0292\n!\3!\5!\u0295\n!\3!\3!\3!\3!\3")
        buf.write("!\5!\u029c\n!\3!\5!\u029f\n!\3!\3!\3!\3!\3!\3!\5!\u02a7")
        buf.write("\n!\3\"\5\"\u02aa\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\5\"\u02b5\n\"\3\"\3\"\5\"\u02b9\n\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\5\"\u02c4\n\"\3\"\3\"\3\"\5\"\u02c9")
        buf.write("\n\"\5\"\u02cb\n\"\3\"\3\"\5\"\u02cf\n\"\3#\3#\3#\5#\u02d4")
        buf.write("\n#\3#\3#\3$\3$\3$\5$\u02db\n$\3$\3$\3%\3%\3%\3%\3&\3")
        buf.write("&\3&\3\'\3\'\3\'\5\'\u02e9\n\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u02f2\n\'\3\'\3\'\5\'\u02f6\n\'\3\'\5\'\u02f9")
        buf.write("\n\'\3\'\5\'\u02fc\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u0303\n")
        buf.write("\'\3\'\3\'\3\'\5\'\u0308\n\'\5\'\u030a\n\'\3(\3(\3(\5")
        buf.write("(\u030f\n(\3(\3(\3)\3)\3)\7)\u0316\n)\f)\16)\u0319\13")
        buf.write(")\3*\3*\5*\u031d\n*\3*\3*\3+\3+\3+\3+\7+\u0325\n+\f+\16")
        buf.write("+\u0328\13+\3+\3+\3,\3,\3,\3,\3,\5,\u0331\n,\3-\3-\7-")
        buf.write("\u0335\n-\f-\16-\u0338\13-\3.\3.\5.\u033c\n.\3.\3.\3.")
        buf.write("\5.\u0341\n.\5.\u0343\n.\3/\3/\5/\u0347\n/\3/\5/\u034a")
        buf.write("\n/\3/\3/\7/\u034e\n/\f/\16/\u0351\13/\3\60\3\60\3\60")
        buf.write("\3\61\3\61\3\61\3\61\7\61\u035a\n\61\f\61\16\61\u035d")
        buf.write("\13\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u0366\n")
        buf.write("\62\3\62\5\62\u0369\n\62\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u0370\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u0391\n\64\5\64\u0393\n\64\3\65\3\65\5\65\u0397")
        buf.write("\n\65\5\65\u0399\n\65\3\65\3\65\3\65\5\65\u039e\n\65\3")
        buf.write("\65\3\65\7\65\u03a2\n\65\f\65\16\65\u03a5\13\65\3\65\3")
        buf.write("\65\5\65\u03a9\n\65\5\65\u03ab\n\65\3\65\3\65\5\65\u03af")
        buf.write("\n\65\3\65\5\65\u03b2\n\65\3\65\5\65\u03b5\n\65\3\65\3")
        buf.write("\65\7\65\u03b9\n\65\f\65\16\65\u03bc\13\65\5\65\u03be")
        buf.write("\n\65\3\66\3\66\5\66\u03c2\n\66\3\66\3\66\3\66\5\66\u03c7")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\38\38\38\58\u03d6\n8\38\38\39\39\39\39\59\u03de\n9\3")
        buf.write("9\39\39\39\39\59\u03e5\n9\79\u03e7\n9\f9\169\u03ea\13")
        buf.write("9\3:\3:\3:\3:\5:\u03f0\n:\3;\3;\3;\3;\3;\3;\5;\u03f8\n")
        buf.write(";\3;\3;\3;\5;\u03fd\n;\3;\3;\3;\3;\7;\u0403\n;\f;\16;")
        buf.write("\u0406\13;\3<\3<\3<\7<\u040b\n<\f<\16<\u040e\13<\3=\3")
        buf.write("=\3=\7=\u0413\n=\f=\16=\u0416\13=\3>\3>\5>\u041a\n>\3")
        buf.write("?\3?\3?\5?\u041f\n?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0429\n")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\5?\u0432\n?\3?\3?\3?\3?\5?\u0438")
        buf.write("\n?\3?\3?\3?\3?\3?\7?\u043f\n?\f?\16?\u0442\13?\3@\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0451\n@\f@\16@\u0454")
        buf.write("\13@\3@\3@\3@\3@\3@\3@\3@\6@\u045d\n@\r@\16@\u045e\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u046c\n@\3@\3@\3@\3")
        buf.write("@\7@\u0472\n@\f@\16@\u0475\13@\3A\3A\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\5B\u0480\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\5C\u0490\nC\3D\3D\3E\3E\5E\u0496\nE\3F\3F\3F\3F\3")
        buf.write("F\5F\u049d\nF\3F\5F\u04a0\nF\3G\5G\u04a3\nG\3G\3G\3H\3")
        buf.write("H\3I\3I\3J\3J\3J\3J\5J\u04af\nJ\3K\3K\3K\5K\u04b4\nK\5")
        buf.write("K\u04b6\nK\3L\3L\3M\3M\5M\u04bc\nM\3N\3N\3N\7N\u04c1\n")
        buf.write("N\fN\16N\u04c4\13N\3O\3O\3P\3P\3P\5P\u04cb\nP\3Q\3Q\3")
        buf.write("R\3R\3R\3R\3R\3R\7R\u04d5\nR\fR\16R\u04d8\13R\3R\5R\u04db")
        buf.write("\nR\3R\2\5t|~S\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\2\24\4\2\f\f&&\4\2\32\32//\4\2DDZZ\3\2kl\4\2\17")
        buf.write("\17%%\4\2\35\35;;\4\2EEXX\4\2\66\66AA\4\2\27\27\65\65")
        buf.write("\4\2\62\62gg\4\2MM\177\177\4\2..ee\5\2\4\6MM\177\177\5")
        buf.write("\2\3\3\5\6\t\13\4\2rrxx\6\2 !++`bqq\r\2\21\26\31\31 \"")
        buf.write("\'\'\60\60==LLVV`cmnqq\4\2++\\\\\2\u056f\2\u00a7\3\2\2")
        buf.write("\2\4\u00a9\3\2\2\2\6\u00b2\3\2\2\2\b\u00b8\3\2\2\2\n\u00ba")
        buf.write("\3\2\2\2\f\u00eb\3\2\2\2\16\u010f\3\2\2\2\20\u0119\3\2")
        buf.write("\2\2\22\u0123\3\2\2\2\24\u0125\3\2\2\2\26\u0136\3\2\2")
        buf.write("\2\30\u013e\3\2\2\2\32\u0144\3\2\2\2\34\u0148\3\2\2\2")
        buf.write("\36\u016a\3\2\2\2 \u016c\3\2\2\2\"\u0192\3\2\2\2$\u01e0")
        buf.write("\3\2\2\2&\u01e2\3\2\2\2(\u01ea\3\2\2\2*\u01ec\3\2\2\2")
        buf.write(",\u0201\3\2\2\2.\u0238\3\2\2\2\60\u0240\3\2\2\2\62\u0242")
        buf.write("\3\2\2\2\64\u0258\3\2\2\2\66\u0262\3\2\2\28\u0266\3\2")
        buf.write("\2\2:\u0269\3\2\2\2<\u026d\3\2\2\2>\u0286\3\2\2\2@\u02a6")
        buf.write("\3\2\2\2B\u02ce\3\2\2\2D\u02d0\3\2\2\2F\u02d7\3\2\2\2")
        buf.write("H\u02de\3\2\2\2J\u02e2\3\2\2\2L\u0309\3\2\2\2N\u030b\3")
        buf.write("\2\2\2P\u0312\3\2\2\2R\u031a\3\2\2\2T\u0320\3\2\2\2V\u0330")
        buf.write("\3\2\2\2X\u0332\3\2\2\2Z\u0342\3\2\2\2\\\u0344\3\2\2\2")
        buf.write("^\u0352\3\2\2\2`\u0355\3\2\2\2b\u0360\3\2\2\2d\u036a\3")
        buf.write("\2\2\2f\u0392\3\2\2\2h\u03bd\3\2\2\2j\u03bf\3\2\2\2l\u03cc")
        buf.write("\3\2\2\2n\u03d2\3\2\2\2p\u03dd\3\2\2\2r\u03ef\3\2\2\2")
        buf.write("t\u03fc\3\2\2\2v\u0407\3\2\2\2x\u040f\3\2\2\2z\u0419\3")
        buf.write("\2\2\2|\u041b\3\2\2\2~\u046b\3\2\2\2\u0080\u0476\3\2\2")
        buf.write("\2\u0082\u047f\3\2\2\2\u0084\u048f\3\2\2\2\u0086\u0491")
        buf.write("\3\2\2\2\u0088\u0495\3\2\2\2\u008a\u049f\3\2\2\2\u008c")
        buf.write("\u04a2\3\2\2\2\u008e\u04a6\3\2\2\2\u0090\u04a8\3\2\2\2")
        buf.write("\u0092\u04aa\3\2\2\2\u0094\u04b0\3\2\2\2\u0096\u04b7\3")
        buf.write("\2\2\2\u0098\u04bb\3\2\2\2\u009a\u04bd\3\2\2\2\u009c\u04c5")
        buf.write("\3\2\2\2\u009e\u04ca\3\2\2\2\u00a0\u04cc\3\2\2\2\u00a2")
        buf.write("\u04da\3\2\2\2\u00a4\u00a8\5\6\4\2\u00a5\u00a8\5\b\5\2")
        buf.write("\u00a6\u00a8\5\4\3\2\u00a7\u00a4\3\2\2\2\u00a7\u00a5\3")
        buf.write("\2\2\2\u00a7\u00a6\3\2\2\2\u00a8\3\3\2\2\2\u00a9\u00aa")
        buf.write("\5\n\6\2\u00aa\5\3\2\2\2\u00ab\u00b3\5D#\2\u00ac\u00b3")
        buf.write("\5L\'\2\u00ad\u00b3\5j\66\2\u00ae\u00b3\5F$\2\u00af\u00b3")
        buf.write("\5l\67\2\u00b0\u00b3\5N(\2\u00b1\u00b3\5R*\2\u00b2\u00ab")
        buf.write("\3\2\2\2\u00b2\u00ac\3\2\2\2\u00b2\u00ad\3\2\2\2\u00b2")
        buf.write("\u00ae\3\2\2\2\u00b2\u00af\3\2\2\2\u00b2\u00b0\3\2\2\2")
        buf.write("\u00b2\u00b1\3\2\2\2\u00b3\7\3\2\2\2\u00b4\u00b9\5\f\7")
        buf.write("\2\u00b5\u00b9\5 \21\2\u00b6\u00b9\5(\25\2\u00b7\u00b9")
        buf.write("\5\"\22\2\u00b8\u00b4\3\2\2\2\u00b8\u00b5\3\2\2\2\u00b8")
        buf.write("\u00b6\3\2\2\2\u00b8\u00b7\3\2\2\2\u00b9\t\3\2\2\2\u00ba")
        buf.write("\u00bc\7i\2\2\u00bb\u00bd\7\37\2\2\u00bc\u00bb\3\2\2\2")
        buf.write("\u00bc\u00bd\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bf\5")
        buf.write("\u0098M\2\u00bf\13\3\2\2\2\u00c0\u00ec\5\16\b\2\u00c1")
        buf.write("\u00ec\5\20\t\2\u00c2\u00c4\5\24\13\2\u00c3\u00c5\5\26")
        buf.write("\f\2\u00c4\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c4")
        buf.write("\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00d0\3\2\2\2\u00c8")
        buf.write("\u00ca\7f\2\2\u00c9\u00cb\t\2\2\2\u00ca\u00c9\3\2\2\2")
        buf.write("\u00ca\u00cb\3\2\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00cf\5")
        buf.write("\16\b\2\u00cd\u00cf\5\20\t\2\u00ce\u00cc\3\2\2\2\u00ce")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d1\3\2\2\2\u00d0\u00c8\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d4\5")
        buf.write("\64\33\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4")
        buf.write("\u00d6\3\2\2\2\u00d5\u00d7\58\35\2\u00d6\u00d5\3\2\2\2")
        buf.write("\u00d6\u00d7\3\2\2\2\u00d7\u00ec\3\2\2\2\u00d8\u00da\5")
        buf.write("\22\n\2\u00d9\u00db\5\30\r\2\u00da\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2")
        buf.write("\u00dd\u00e3\3\2\2\2\u00de\u00e0\7f\2\2\u00df\u00e1\t")
        buf.write("\2\2\2\u00e0\u00df\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2")
        buf.write("\3\2\2\2\u00e2\u00e4\5\20\t\2\u00e3\u00de\3\2\2\2\u00e3")
        buf.write("\u00e4\3\2\2\2\u00e4\u00e6\3\2\2\2\u00e5\u00e7\5\64\33")
        buf.write("\2\u00e6\u00e5\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9")
        buf.write("\3\2\2\2\u00e8\u00ea\58\35\2\u00e9\u00e8\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00c0\3\2\2\2")
        buf.write("\u00eb\u00c1\3\2\2\2\u00eb\u00c2\3\2\2\2\u00eb\u00d8\3")
        buf.write("\2\2\2\u00ec\r\3\2\2\2\u00ed\u00f1\7[\2\2\u00ee\u00f0")
        buf.write("\5\32\16\2\u00ef\u00ee\3\2\2\2\u00f0\u00f3\3\2\2\2\u00f1")
        buf.write("\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f4\3\2\2\2")
        buf.write("\u00f3\u00f1\3\2\2\2\u00f4\u00f6\5\34\17\2\u00f5\u00f7")
        buf.write("\5\62\32\2\u00f6\u00f5\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u00f9\3\2\2\2\u00f8\u00fa\5\64\33\2\u00f9\u00f8\3\2\2")
        buf.write("\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00fd")
        buf.write("\58\35\2\u00fc\u00fb\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd")
        buf.write("\u0110\3\2\2\2\u00fe\u0102\7[\2\2\u00ff\u0101\5\32\16")
        buf.write("\2\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100")
        buf.write("\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0105\3\2\2\2\u0104")
        buf.write("\u0102\3\2\2\2\u0105\u0107\5\34\17\2\u0106\u0108\5\62")
        buf.write("\32\2\u0107\u0106\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010a")
        buf.write("\3\2\2\2\u0109\u010b\5\64\33\2\u010a\u0109\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\u010d\3\2\2\2\u010c\u010e\58\35\2")
        buf.write("\u010d\u010c\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0110\3")
        buf.write("\2\2\2\u010f\u00ed\3\2\2\2\u010f\u00fe\3\2\2\2\u0110\17")
        buf.write("\3\2\2\2\u0111\u0112\7\u0081\2\2\u0112\u0113\5\16\b\2")
        buf.write("\u0113\u0114\7\u0082\2\2\u0114\u011a\3\2\2\2\u0115\u0116")
        buf.write("\7\u0081\2\2\u0116\u0117\5\20\t\2\u0117\u0118\7\u0082")
        buf.write("\2\2\u0118\u011a\3\2\2\2\u0119\u0111\3\2\2\2\u0119\u0115")
        buf.write("\3\2\2\2\u011a\21\3\2\2\2\u011b\u011c\7\u0081\2\2\u011c")
        buf.write("\u011d\5\24\13\2\u011d\u011e\7\u0082\2\2\u011e\u0124\3")
        buf.write("\2\2\2\u011f\u0120\7\u0081\2\2\u0120\u0121\5\22\n\2\u0121")
        buf.write("\u0122\7\u0082\2\2\u0122\u0124\3\2\2\2\u0123\u011b\3\2")
        buf.write("\2\2\u0123\u011f\3\2\2\2\u0124\23\3\2\2\2\u0125\u0129")
        buf.write("\7[\2\2\u0126\u0128\5\32\16\2\u0127\u0126\3\2\2\2\u0128")
        buf.write("\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2\u012c\u012e\5")
        buf.write("\34\17\2\u012d\u012f\5\62\32\2\u012e\u012d\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u0132\5\64\33")
        buf.write("\2\u0131\u0130\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134")
        buf.write("\3\2\2\2\u0133\u0135\58\35\2\u0134\u0133\3\2\2\2\u0134")
        buf.write("\u0135\3\2\2\2\u0135\25\3\2\2\2\u0136\u0138\7f\2\2\u0137")
        buf.write("\u0139\t\2\2\2\u0138\u0137\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u013c\3\2\2\2\u013a\u013d\5\24\13\2\u013b\u013d")
        buf.write("\5\22\n\2\u013c\u013a\3\2\2\2\u013c\u013b\3\2\2\2\u013d")
        buf.write("\27\3\2\2\2\u013e\u0140\7f\2\2\u013f\u0141\t\2\2\2\u0140")
        buf.write("\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\5\22\n\2\u0143\31\3\2\2\2\u0144\u0145\t\2")
        buf.write("\2\2\u0145\33\3\2\2\2\u0146\u0149\7\3\2\2\u0147\u0149")
        buf.write("\5\36\20\2\u0148\u0146\3\2\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014e\3\2\2\2\u014a\u014b\7\u0083\2\2\u014b\u014d\5\36")
        buf.write("\20\2\u014c\u014a\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c")
        buf.write("\3\2\2\2\u014e\u014f\3\2\2\2\u014f\35\3\2\2\2\u0150\u014e")
        buf.write("\3\2\2\2\u0151\u0152\5\u0092J\2\u0152\u0153\7\u0080\2")
        buf.write("\2\u0153\u0154\7\3\2\2\u0154\u016b\3\2\2\2\u0155\u015a")
        buf.write("\5\u0094K\2\u0156\u0158\7\16\2\2\u0157\u0156\3\2\2\2\u0157")
        buf.write("\u0158\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b\5\u0098")
        buf.write("M\2\u015a\u0157\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u016b")
        buf.write("\3\2\2\2\u015c\u0161\5n8\2\u015d\u015f\7\16\2\2\u015e")
        buf.write("\u015d\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0160\3\2\2\2")
        buf.write("\u0160\u0162\5\u0098M\2\u0161\u015e\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u016b\3\2\2\2\u0163\u0168\5t;\2\u0164\u0166")
        buf.write("\7\16\2\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write("\u0167\3\2\2\2\u0167\u0169\5\u0098M\2\u0168\u0165\3\2")
        buf.write("\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0151")
        buf.write("\3\2\2\2\u016a\u0155\3\2\2\2\u016a\u015c\3\2\2\2\u016a")
        buf.write("\u0163\3\2\2\2\u016b\37\3\2\2\2\u016c\u016e\7<\2\2\u016d")
        buf.write("\u016f\79\2\2\u016e\u016d\3\2\2\2\u016e\u016f\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\u0171\7>\2\2\u0171\u0182\5")
        buf.write("\u0096L\2\u0172\u0173\7\u0081\2\2\u0173\u0174\5\u009a")
        buf.write("N\2\u0174\u0175\7\u0082\2\2\u0175\u0177\3\2\2\2\u0176")
        buf.write("\u0172\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\3\2\2\2")
        buf.write("\u0178\u0183\5$\23\2\u0179\u017a\7\\\2\2\u017a\u017f\5")
        buf.write("&\24\2\u017b\u017c\7\u0083\2\2\u017c\u017e\5&\24\2\u017d")
        buf.write("\u017b\3\2\2\2\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2")
        buf.write("\u017f\u0180\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3")
        buf.write("\2\2\2\u0182\u0176\3\2\2\2\u0182\u0179\3\2\2\2\u0183\u0190")
        buf.write("\3\2\2\2\u0184\u0185\7N\2\2\u0185\u0186\7)\2\2\u0186\u0187")
        buf.write("\7A\2\2\u0187\u0188\7h\2\2\u0188\u018d\5&\24\2\u0189\u018a")
        buf.write("\7\u0083\2\2\u018a\u018c\5&\24\2\u018b\u0189\3\2\2\2\u018c")
        buf.write("\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2")
        buf.write("\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0184\3")
        buf.write("\2\2\2\u0190\u0191\3\2\2\2\u0191!\3\2\2\2\u0192\u0193")
        buf.write("\7I\2\2\u0193\u0195\7\36\2\2\u0194\u0196\7J\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u0198\7\67\2\2\u0198\u0199\7w\2\2\u0199\u019a\7")
        buf.write(">\2\2\u019a\u019b\7^\2\2\u019b\u01a1\5\u0096L\2\u019c")
        buf.write("\u019d\7R\2\2\u019d\u019e\7\u0081\2\2\u019e\u019f\5\u009a")
        buf.write("N\2\u019f\u01a0\7\u0082\2\2\u01a0\u01a2\3\2\2\2\u01a1")
        buf.write("\u019c\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a9\3\2\2\2")
        buf.write("\u01a3\u01a5\t\3\2\2\u01a4\u01a6\5.\30\2\u01a5\u01a4\3")
        buf.write("\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8")
        buf.write("\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a3\3\2\2\2\u01a9")
        buf.write("\u01aa\3\2\2\2\u01aa\u01b1\3\2\2\2\u01ab\u01ad\7D\2\2")
        buf.write("\u01ac\u01ae\5\60\31\2\u01ad\u01ac\3\2\2\2\u01ae\u01af")
        buf.write("\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("\u01b2\3\2\2\2\u01b1\u01ab\3\2\2\2\u01b1\u01b2\3\2\2\2")
        buf.write("\u01b2\u01b7\3\2\2\2\u01b3\u01b4\79\2\2\u01b4\u01b5\5")
        buf.write("\u008eH\2\u01b5\u01b6\t\4\2\2\u01b6\u01b8\3\2\2\2\u01b7")
        buf.write("\u01b3\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01c4\3\2\2\2")
        buf.write("\u01b9\u01ba\7\u0081\2\2\u01ba\u01bf\5\u0088E\2\u01bb")
        buf.write("\u01bc\7\u0083\2\2\u01bc\u01be\5\u0088E\2\u01bd\u01bb")
        buf.write("\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf")
        buf.write("\u01c0\3\2\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01bf\3\2\2\2")
        buf.write("\u01c2\u01c3\7\u0082\2\2\u01c3\u01c5\3\2\2\2\u01c4\u01b9")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01cf\3\2\2\2\u01c6")
        buf.write("\u01c7\7\\\2\2\u01c7\u01cc\5&\24\2\u01c8\u01c9\7\u0083")
        buf.write("\2\2\u01c9\u01cb\5&\24\2\u01ca\u01c8\3\2\2\2\u01cb\u01ce")
        buf.write("\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01d0\3\2\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01c6\3\2\2\2")
        buf.write("\u01cf\u01d0\3\2\2\2\u01d0#\3\2\2\2\u01d1\u01e1\5\f\7")
        buf.write("\2\u01d2\u01d3\t\5\2\2\u01d3\u01d4\7\u0081\2\2\u01d4\u01d5")
        buf.write("\5x=\2\u01d5\u01dd\7\u0082\2\2\u01d6\u01d7\7\u0083\2\2")
        buf.write("\u01d7\u01d8\7\u0081\2\2\u01d8\u01d9\5x=\2\u01d9\u01da")
        buf.write("\7\u0082\2\2\u01da\u01dc\3\2\2\2\u01db\u01d6\3\2\2\2\u01dc")
        buf.write("\u01df\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2")
        buf.write("\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01d1\3")
        buf.write("\2\2\2\u01e0\u01d2\3\2\2\2\u01e1%\3\2\2\2\u01e2\u01e3")
        buf.write("\5\u0094K\2\u01e3\u01e6\7|\2\2\u01e4\u01e7\5t;\2\u01e5")
        buf.write("\u01e7\7#\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e5\3\2\2\2")
        buf.write("\u01e7\'\3\2\2\2\u01e8\u01eb\5*\26\2\u01e9\u01eb\5,\27")
        buf.write("\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb)\3\2")
        buf.write("\2\2\u01ec\u01ed\7$\2\2\u01ed\u01ee\7\61\2\2\u01ee\u01f4")
        buf.write("\5\u0096L\2\u01ef\u01f0\7R\2\2\u01f0\u01f1\7\u0081\2\2")
        buf.write("\u01f1\u01f2\5\u009aN\2\u01f2\u01f3\7\u0082\2\2\u01f3")
        buf.write("\u01f5\3\2\2\2\u01f4\u01ef\3\2\2\2\u01f4\u01f5\3\2\2\2")
        buf.write("\u01f5\u01f8\3\2\2\2\u01f6\u01f7\7o\2\2\u01f7\u01f9\5")
        buf.write("t;\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb")
        buf.write("\3\2\2\2\u01fa\u01fc\5\64\33\2\u01fb\u01fa\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fe\7G\2\2")
        buf.write("\u01fe\u0200\5\u008eH\2\u01ff\u01fd\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u0200+\3\2\2\2\u0201\u0229\7$\2\2\u0202\u0205")
        buf.write("\5\u0096L\2\u0203\u0204\7\u0080\2\2\u0204\u0206\7\3\2")
        buf.write("\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u020f")
        buf.write("\3\2\2\2\u0207\u0208\7\u0083\2\2\u0208\u020b\5\u0096L")
        buf.write("\2\u0209\u020a\7\u0080\2\2\u020a\u020c\7\3\2\2\u020b\u0209")
        buf.write("\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e\3\2\2\2\u020d")
        buf.write("\u0207\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2")
        buf.write("\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2\u0211\u020f\3")
        buf.write("\2\2\2\u0212\u0213\7\61\2\2\u0213\u0214\5<\37\2\u0214")
        buf.write("\u022a\3\2\2\2\u0215\u0216\7\61\2\2\u0216\u0219\5\u0096")
        buf.write("L\2\u0217\u0218\7\u0080\2\2\u0218\u021a\7\3\2\2\u0219")
        buf.write("\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u0223\3\2\2\2")
        buf.write("\u021b\u021c\7\u0083\2\2\u021c\u021f\5\u0096L\2\u021d")
        buf.write("\u021e\7\u0080\2\2\u021e\u0220\7\3\2\2\u021f\u021d\3\2")
        buf.write("\2\2\u021f\u0220\3\2\2\2\u0220\u0222\3\2\2\2\u0221\u021b")
        buf.write("\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u0226\3\2\2\2\u0225\u0223\3\2\2\2")
        buf.write("\u0226\u0227\7j\2\2\u0227\u0228\5<\37\2\u0228\u022a\3")
        buf.write("\2\2\2\u0229\u0202\3\2\2\2\u0229\u0215\3\2\2\2\u022a\u022d")
        buf.write("\3\2\2\2\u022b\u022c\7o\2\2\u022c\u022e\5t;\2\u022d\u022b")
        buf.write("\3\2\2\2\u022d\u022e\3\2\2\2\u022e-\3\2\2\2\u022f\u0230")
        buf.write("\7_\2\2\u0230\u0231\7\30\2\2\u0231\u0239\7w\2\2\u0232")
        buf.write("\u0233\7*\2\2\u0233\u0234\7\30\2\2\u0234\u0239\7w\2\2")
        buf.write("\u0235\u0236\7,\2\2\u0236\u0237\7\30\2\2\u0237\u0239\7")
        buf.write("w\2\2\u0238\u022f\3\2\2\2\u0238\u0232\3\2\2\2\u0238\u0235")
        buf.write("\3\2\2\2\u0239/\3\2\2\2\u023a\u023b\7]\2\2\u023b\u023c")
        buf.write("\7\30\2\2\u023c\u0241\7w\2\2\u023d\u023e\7_\2\2\u023e")
        buf.write("\u023f\7\30\2\2\u023f\u0241\7w\2\2\u0240\u023a\3\2\2\2")
        buf.write("\u0240\u023d\3\2\2\2\u0241\61\3\2\2\2\u0242\u0243\7\61")
        buf.write("\2\2\u0243\u0246\5<\37\2\u0244\u0245\7o\2\2\u0245\u0247")
        buf.write("\5t;\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0252")
        buf.write("\3\2\2\2\u0248\u0249\7\63\2\2\u0249\u024a\7\30\2\2\u024a")
        buf.write("\u024f\5:\36\2\u024b\u024c\7\u0083\2\2\u024c\u024e\5:")
        buf.write("\36\2\u024d\u024b\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d")
        buf.write("\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0253\3\2\2\2\u0251")
        buf.write("\u024f\3\2\2\2\u0252\u0248\3\2\2\2\u0252\u0253\3\2\2\2")
        buf.write("\u0253\u0256\3\2\2\2\u0254\u0255\7\64\2\2\u0255\u0257")
        buf.write("\5t;\2\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\63")
        buf.write("\3\2\2\2\u0258\u0259\7P\2\2\u0259\u025a\7\30\2\2\u025a")
        buf.write("\u025f\5\66\34\2\u025b\u025c\7\u0083\2\2\u025c\u025e\5")
        buf.write("\66\34\2\u025d\u025b\3\2\2\2\u025e\u0261\3\2\2\2\u025f")
        buf.write("\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260\65\3\2\2\2\u0261")
        buf.write("\u025f\3\2\2\2\u0262\u0264\5t;\2\u0263\u0265\t\6\2\2\u0264")
        buf.write("\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\67\3\2\2\2\u0266")
        buf.write("\u0267\7G\2\2\u0267\u0268\5\u008eH\2\u02689\3\2\2\2\u0269")
        buf.write("\u026b\5t;\2\u026a\u026c\t\6\2\2\u026b\u026a\3\2\2\2\u026b")
        buf.write("\u026c\3\2\2\2\u026c;\3\2\2\2\u026d\u0272\5> \2\u026e")
        buf.write("\u026f\7\u0083\2\2\u026f\u0271\5> \2\u0270\u026e\3\2\2")
        buf.write("\2\u0271\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273=\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u0279")
        buf.write("\5@!\2\u0276\u0278\5B\"\2\u0277\u0276\3\2\2\2\u0278\u027b")
        buf.write("\3\2\2\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u0287\3\2\2\2\u027b\u0279\3\2\2\2\u027c\u027d\7\u0081")
        buf.write("\2\2\u027d\u0281\5@!\2\u027e\u0280\5B\"\2\u027f\u027e")
        buf.write("\3\2\2\2\u0280\u0283\3\2\2\2\u0281\u027f\3\2\2\2\u0281")
        buf.write("\u0282\3\2\2\2\u0282\u0284\3\2\2\2\u0283\u0281\3\2\2\2")
        buf.write("\u0284\u0285\7\u0082\2\2\u0285\u0287\3\2\2\2\u0286\u0275")
        buf.write("\3\2\2\2\u0286\u027c\3\2\2\2\u0287?\3\2\2\2\u0288\u028e")
        buf.write("\5\u0096L\2\u0289\u028a\7R\2\2\u028a\u028b\7\u0081\2\2")
        buf.write("\u028b\u028c\5\u009aN\2\u028c\u028d\7\u0082\2\2\u028d")
        buf.write("\u028f\3\2\2\2\u028e\u0289\3\2\2\2\u028e\u028f\3\2\2\2")
        buf.write("\u028f\u0294\3\2\2\2\u0290\u0292\7\16\2\2\u0291\u0290")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2\u0293")
        buf.write("\u0295\5\u0098M\2\u0294\u0291\3\2\2\2\u0294\u0295\3\2")
        buf.write("\2\2\u0295\u02a7\3\2\2\2\u0296\u029c\5\f\7\2\u0297\u0298")
        buf.write("\7\u0081\2\2\u0298\u0299\5\f\7\2\u0299\u029a\7\u0082\2")
        buf.write("\2\u029a\u029c\3\2\2\2\u029b\u0296\3\2\2\2\u029b\u0297")
        buf.write("\3\2\2\2\u029c\u029e\3\2\2\2\u029d\u029f\7\16\2\2\u029e")
        buf.write("\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a1\5\u0098M\2\u02a1\u02a7\3\2\2\2\u02a2\u02a3")
        buf.write("\7\u0081\2\2\u02a3\u02a4\5<\37\2\u02a4\u02a5\7\u0082\2")
        buf.write("\2\u02a5\u02a7\3\2\2\2\u02a6\u0288\3\2\2\2\u02a6\u029b")
        buf.write("\3\2\2\2\u02a6\u02a2\3\2\2\2\u02a7A\3\2\2\2\u02a8\u02aa")
        buf.write("\t\7\2\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ac\7@\2\2\u02ac\u02b4\5@!\2\u02ad")
        buf.write("\u02ae\7N\2\2\u02ae\u02b5\5t;\2\u02af\u02b0\7j\2\2\u02b0")
        buf.write("\u02b1\7\u0081\2\2\u02b1\u02b2\5\u009aN\2\u02b2\u02b3")
        buf.write("\7\u0082\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02ad\3\2\2\2\u02b4")
        buf.write("\u02af\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02cf\3\2\2\2")
        buf.write("\u02b6\u02b8\t\b\2\2\u02b7\u02b9\7Q\2\2\u02b8\u02b7\3")
        buf.write("\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb")
        buf.write("\7@\2\2\u02bb\u02c3\5@!\2\u02bc\u02bd\7N\2\2\u02bd\u02c4")
        buf.write("\5t;\2\u02be\u02bf\7j\2\2\u02bf\u02c0\7\u0081\2\2\u02c0")
        buf.write("\u02c1\5\u009aN\2\u02c1\u02c2\7\u0082\2\2\u02c2\u02c4")
        buf.write("\3\2\2\2\u02c3\u02bc\3\2\2\2\u02c3\u02be\3\2\2\2\u02c4")
        buf.write("\u02cf\3\2\2\2\u02c5\u02ca\7K\2\2\u02c6\u02c8\t\b\2\2")
        buf.write("\u02c7\u02c9\7Q\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3")
        buf.write("\2\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c6\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\7@\2\2\u02cd")
        buf.write("\u02cf\5@!\2\u02ce\u02a9\3\2\2\2\u02ce\u02b6\3\2\2\2\u02ce")
        buf.write("\u02c5\3\2\2\2\u02cfC\3\2\2\2\u02d0\u02d1\7\34\2\2\u02d1")
        buf.write("\u02d3\7\37\2\2\u02d2\u02d4\5H%\2\u02d3\u02d2\3\2\2\2")
        buf.write("\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\5")
        buf.write("\u0098M\2\u02d6E\3\2\2\2\u02d7\u02d8\7(\2\2\u02d8\u02da")
        buf.write("\7\37\2\2\u02d9\u02db\5J&\2\u02da\u02d9\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\5\u0098")
        buf.write("M\2\u02ddG\3\2\2\2\u02de\u02df\78\2\2\u02df\u02e0\7M\2")
        buf.write("\2\u02e0\u02e1\7-\2\2\u02e1I\3\2\2\2\u02e2\u02e3\78\2")
        buf.write("\2\u02e3\u02e4\7-\2\2\u02e4K\3\2\2\2\u02e5\u02e6\7\34")
        buf.write("\2\2\u02e6\u02e8\7^\2\2\u02e7\u02e9\5H%\2\u02e8\u02e7")
        buf.write("\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u02eb\5\u0096L\2\u02eb\u02ec\7F\2\2\u02ec\u02ed\5\u0096")
        buf.write("L\2\u02ed\u030a\3\2\2\2\u02ee\u02ef\7\34\2\2\u02ef\u02f1")
        buf.write("\7^\2\2\u02f0\u02f2\5H%\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2")
        buf.write("\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f5\5\u0096L\2\u02f4")
        buf.write("\u02f6\5T+\2\u02f5\u02f4\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02f8\3\2\2\2\u02f7\u02f9\5d\63\2\u02f8\u02f7\3\2\2\2")
        buf.write("\u02f8\u02f9\3\2\2\2\u02f9\u02fb\3\2\2\2\u02fa\u02fc\7")
        buf.write("\16\2\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc")
        buf.write("\u02fd\3\2\2\2\u02fd\u02fe\5\f\7\2\u02fe\u030a\3\2\2\2")
        buf.write("\u02ff\u0300\7\34\2\2\u0300\u0302\7^\2\2\u0301\u0303\5")
        buf.write("H%\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0305\5\u0096L\2\u0305\u0307\5T+\2\u0306")
        buf.write("\u0308\5d\63\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308\u030a\3\2\2\2\u0309\u02e5\3\2\2\2\u0309\u02ee\3")
        buf.write("\2\2\2\u0309\u02ff\3\2\2\2\u030aM\3\2\2\2\u030b\u030c")
        buf.write("\7(\2\2\u030c\u030e\7^\2\2\u030d\u030f\5J&\2\u030e\u030d")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0311\5P)\2\u0311O\3\2\2\2\u0312\u0317\5\u0096L\2\u0313")
        buf.write("\u0314\7\u0083\2\2\u0314\u0316\5\u0096L\2\u0315\u0313")
        buf.write("\3\2\2\2\u0316\u0319\3\2\2\2\u0317\u0315\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318Q\3\2\2\2\u0319\u0317\3\2\2\2\u031a")
        buf.write("\u031c\7d\2\2\u031b\u031d\7^\2\2\u031c\u031b\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f\5\u0096")
        buf.write("L\2\u031fS\3\2\2\2\u0320\u0321\7\u0081\2\2\u0321\u0326")
        buf.write("\5V,\2\u0322\u0323\7\u0083\2\2\u0323\u0325\5V,\2\u0324")
        buf.write("\u0322\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2")
        buf.write("\u0326\u0327\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u0326\3")
        buf.write("\2\2\2\u0329\u032a\7\u0082\2\2\u032aU\3\2\2\2\u032b\u032c")
        buf.write("\5\u0098M\2\u032c\u032d\5X-\2\u032d\u0331\3\2\2\2\u032e")
        buf.write("\u0331\5h\65\2\u032f\u0331\5\\/\2\u0330\u032b\3\2\2\2")
        buf.write("\u0330\u032e\3\2\2\2\u0330\u032f\3\2\2\2\u0331W\3\2\2")
        buf.write("\2\u0332\u0336\5\u00a2R\2\u0333\u0335\5Z.\2\u0334\u0333")
        buf.write("\3\2\2\2\u0335\u0338\3\2\2\2\u0336\u0334\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337Y\3\2\2\2\u0338\u0336\3\2\2\2\u0339")
        buf.write("\u0343\5\u008cG\2\u033a\u033c\7T\2\2\u033b\u033a\3\2\2")
        buf.write("\2\u033b\u033c\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0343")
        buf.write("\7A\2\2\u033e\u0340\7g\2\2\u033f\u0341\7A\2\2\u0340\u033f")
        buf.write("\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2\u0342")
        buf.write("\u0339\3\2\2\2\u0342\u033b\3\2\2\2\u0342\u033e\3\2\2\2")
        buf.write("\u0343[\3\2\2\2\u0344\u0346\t\t\2\2\u0345\u0347\5\u0098")
        buf.write("M\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349")
        buf.write("\3\2\2\2\u0348\u034a\5^\60\2\u0349\u0348\3\2\2\2\u0349")
        buf.write("\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034f\5`\61\2")
        buf.write("\u034c\u034e\5^\60\2\u034d\u034c\3\2\2\2\u034e\u0351\3")
        buf.write("\2\2\2\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350]")
        buf.write("\3\2\2\2\u0351\u034f\3\2\2\2\u0352\u0353\7j\2\2\u0353")
        buf.write("\u0354\t\n\2\2\u0354_\3\2\2\2\u0355\u0356\7\u0081\2\2")
        buf.write("\u0356\u035b\5b\62\2\u0357\u0358\7\u0083\2\2\u0358\u035a")
        buf.write("\5b\62\2\u0359\u0357\3\2\2\2\u035a\u035d\3\2\2\2\u035b")
        buf.write("\u0359\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2")
        buf.write("\u035d\u035b\3\2\2\2\u035e\u035f\7\u0082\2\2\u035fa\3")
        buf.write("\2\2\2\u0360\u0365\5\u0098M\2\u0361\u0362\7\u0081\2\2")
        buf.write("\u0362\u0363\5\u008eH\2\u0363\u0364\7\u0082\2\2\u0364")
        buf.write("\u0366\3\2\2\2\u0365\u0361\3\2\2\2\u0365\u0366\3\2\2\2")
        buf.write("\u0366\u0368\3\2\2\2\u0367\u0369\t\6\2\2\u0368\u0367\3")
        buf.write("\2\2\2\u0368\u0369\3\2\2\2\u0369c\3\2\2\2\u036a\u036b")
        buf.write("\7R\2\2\u036b\u036c\7\30\2\2\u036c\u036f\5f\64\2\u036d")
        buf.write("\u036e\7S\2\2\u036e\u0370\5\u008eH\2\u036f\u036d\3\2\2")
        buf.write("\2\u036f\u0370\3\2\2\2\u0370e\3\2\2\2\u0371\u0372\7\65")
        buf.write("\2\2\u0372\u0373\7\u0081\2\2\u0373\u0374\5t;\2\u0374\u0375")
        buf.write("\7\u0083\2\2\u0375\u0376\5t;\2\u0376\u0377\7\u0082\2\2")
        buf.write("\u0377\u0393\3\2\2\2\u0378\u0379\7A\2\2\u0379\u037a\7")
        buf.write("\u0081\2\2\u037a\u037b\5\u009aN\2\u037b\u037c\7\u0082")
        buf.write("\2\2\u037c\u0393\3\2\2\2\u037d\u037e\7U\2\2\u037e\u037f")
        buf.write("\7\u0081\2\2\u037f\u0380\5t;\2\u0380\u0381\7\u0083\2\2")
        buf.write("\u0381\u0382\5t;\2\u0382\u0383\7\u0083\2\2\u0383\u0384")
        buf.write("\5t;\2\u0384\u0385\7\u0082\2\2\u0385\u0393\3\2\2\2\u0386")
        buf.write("\u0390\7H\2\2\u0387\u0388\7\u0081\2\2\u0388\u0389\5t;")
        buf.write("\2\u0389\u038a\7\u0082\2\2\u038a\u0391\3\2\2\2\u038b\u038c")
        buf.write("\7\32\2\2\u038c\u038d\7\u0081\2\2\u038d\u038e\5\u009a")
        buf.write("N\2\u038e\u038f\7\u0082\2\2\u038f\u0391\3\2\2\2\u0390")
        buf.write("\u0387\3\2\2\2\u0390\u038b\3\2\2\2\u0391\u0393\3\2\2\2")
        buf.write("\u0392\u0371\3\2\2\2\u0392\u0378\3\2\2\2\u0392\u037d\3")
        buf.write("\2\2\2\u0392\u0386\3\2\2\2\u0393g\3\2\2\2\u0394\u0396")
        buf.write("\7\33\2\2\u0395\u0397\5\u0098M\2\u0396\u0395\3\2\2\2\u0396")
        buf.write("\u0397\3\2\2\2\u0397\u0399\3\2\2\2\u0398\u0394\3\2\2\2")
        buf.write("\u0398\u0399\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039b\7")
        buf.write("T\2\2\u039b\u039d\7A\2\2\u039c\u039e\5^\60\2\u039d\u039c")
        buf.write("\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f")
        buf.write("\u03a3\5`\61\2\u03a0\u03a2\5^\60\2\u03a1\u03a0\3\2\2\2")
        buf.write("\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3")
        buf.write("\2\2\2\u03a4\u03be\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a8")
        buf.write("\7\33\2\2\u03a7\u03a9\5\u0098M\2\u03a8\u03a7\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u03ab\3\2\2\2\u03aa\u03a6\3\2\2\2")
        buf.write("\u03aa\u03ab\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\7")
        buf.write("g\2\2\u03ad\u03af\t\t\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af")
        buf.write("\3\2\2\2\u03af\u03b1\3\2\2\2\u03b0\u03b2\5\u0098M\2\u03b1")
        buf.write("\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4\3\2\2\2")
        buf.write("\u03b3\u03b5\5^\60\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3")
        buf.write("\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03ba\5`\61\2\u03b7\u03b9")
        buf.write("\5^\60\2\u03b8\u03b7\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba")
        buf.write("\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03be\3\2\2\2")
        buf.write("\u03bc\u03ba\3\2\2\2\u03bd\u0398\3\2\2\2\u03bd\u03aa\3")
        buf.write("\2\2\2\u03bei\3\2\2\2\u03bf\u03c1\7\34\2\2\u03c0\u03c2")
        buf.write("\t\13\2\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03c3\3\2\2\2\u03c3\u03c4\7\66\2\2\u03c4\u03c6\5\u0098")
        buf.write("M\2\u03c5\u03c7\5^\60\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\7N\2\2\u03c9")
        buf.write("\u03ca\5\u0096L\2\u03ca\u03cb\5`\61\2\u03cbk\3\2\2\2\u03cc")
        buf.write("\u03cd\7(\2\2\u03cd\u03ce\7\66\2\2\u03ce\u03cf\5\u0098")
        buf.write("M\2\u03cf\u03d0\7N\2\2\u03d0\u03d1\5\u0096L\2\u03d1m\3")
        buf.write("\2\2\2\u03d2\u03d3\5\u0092J\2\u03d3\u03d5\7\u0081\2\2")
        buf.write("\u03d4\u03d6\5p9\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2")
        buf.write("\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\7\u0082\2\2\u03d8")
        buf.write("o\3\2\2\2\u03d9\u03de\5\u008aF\2\u03da\u03de\5\u0094K")
        buf.write("\2\u03db\u03de\5n8\2\u03dc\u03de\5t;\2\u03dd\u03d9\3\2")
        buf.write("\2\2\u03dd\u03da\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03dc")
        buf.write("\3\2\2\2\u03de\u03e8\3\2\2\2\u03df\u03e4\7\u0083\2\2\u03e0")
        buf.write("\u03e5\5\u008aF\2\u03e1\u03e5\5\u0094K\2\u03e2\u03e5\5")
        buf.write("n8\2\u03e3\u03e5\5t;\2\u03e4\u03e0\3\2\2\2\u03e4\u03e1")
        buf.write("\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e7\3\2\2\2\u03e6\u03df\3\2\2\2\u03e7\u03ea\3\2\2\2")
        buf.write("\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9q\3\2\2")
        buf.write("\2\u03ea\u03e8\3\2\2\2\u03eb\u03f0\5\u008aF\2\u03ec\u03f0")
        buf.write("\5\u0094K\2\u03ed\u03f0\5n8\2\u03ee\u03f0\5t;\2\u03ef")
        buf.write("\u03eb\3\2\2\2\u03ef\u03ec\3\2\2\2\u03ef\u03ed\3\2\2\2")
        buf.write("\u03ef\u03ee\3\2\2\2\u03f0s\3\2\2\2\u03f1\u03f2\b;\1\2")
        buf.write("\u03f2\u03f3\t\f\2\2\u03f3\u03fd\5t;\6\u03f4\u03f5\5|")
        buf.write("?\2\u03f5\u03f7\7?\2\2\u03f6\u03f8\7M\2\2\u03f7\u03f6")
        buf.write("\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9")
        buf.write("\u03fa\t\r\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03fd\5|?\2\u03fc")
        buf.write("\u03f1\3\2\2\2\u03fc\u03f4\3\2\2\2\u03fc\u03fb\3\2\2\2")
        buf.write("\u03fd\u0404\3\2\2\2\u03fe\u03ff\f\5\2\2\u03ff\u0400\5")
        buf.write("\u0082B\2\u0400\u0401\5t;\6\u0401\u0403\3\2\2\2\u0402")
        buf.write("\u03fe\3\2\2\2\u0403\u0406\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0404\u0405\3\2\2\2\u0405u\3\2\2\2\u0406\u0404\3\2\2")
        buf.write("\2\u0407\u040c\5t;\2\u0408\u0409\7\u0083\2\2\u0409\u040b")
        buf.write("\5t;\2\u040a\u0408\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a")
        buf.write("\3\2\2\2\u040c\u040d\3\2\2\2\u040dw\3\2\2\2\u040e\u040c")
        buf.write("\3\2\2\2\u040f\u0414\5z>\2\u0410\u0411\7\u0083\2\2\u0411")
        buf.write("\u0413\5z>\2\u0412\u0410\3\2\2\2\u0413\u0416\3\2\2\2\u0414")
        buf.write("\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415y\3\2\2\2\u0416")
        buf.write("\u0414\3\2\2\2\u0417\u041a\5t;\2\u0418\u041a\7#\2\2\u0419")
        buf.write("\u0417\3\2\2\2\u0419\u0418\3\2\2\2\u041a{\3\2\2\2\u041b")
        buf.write("\u041e\b?\1\2\u041c\u041d\7y\2\2\u041d\u041f\7z\2\2\u041e")
        buf.write("\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2")
        buf.write("\u0420\u0421\5~@\2\u0421\u0440\3\2\2\2\u0422\u0423\f\5")
        buf.write("\2\2\u0423\u0424\5\u0084C\2\u0424\u0425\5|?\6\u0425\u043f")
        buf.write("\3\2\2\2\u0426\u0428\f\4\2\2\u0427\u0429\7M\2\2\u0428")
        buf.write("\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write("\u042a\u042b\7\20\2\2\u042b\u042c\5|?\2\u042c\u042d\7")
        buf.write("\r\2\2\u042d\u042e\5|?\5\u042e\u043f\3\2\2\2\u042f\u0431")
        buf.write("\f\7\2\2\u0430\u0432\7M\2\2\u0431\u0430\3\2\2\2\u0431")
        buf.write("\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434\7:\2\2")
        buf.write("\u0434\u0437\7\u0081\2\2\u0435\u0438\5\f\7\2\u0436\u0438")
        buf.write("\5v<\2\u0437\u0435\3\2\2\2\u0437\u0436\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043a\7\u0082\2\2\u043a\u043f\3\2\2\2\u043b")
        buf.write("\u043c\f\6\2\2\u043c\u043d\7?\2\2\u043d\u043f\5\u008c")
        buf.write("G\2\u043e\u0422\3\2\2\2\u043e\u0426\3\2\2\2\u043e\u042f")
        buf.write("\3\2\2\2\u043e\u043b\3\2\2\2\u043f\u0442\3\2\2\2\u0440")
        buf.write("\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441}\3\2\2\2\u0442")
        buf.write("\u0440\3\2\2\2\u0443\u0444\b@\1\2\u0444\u046c\5\u008a")
        buf.write("F\2\u0445\u046c\5\u0094K\2\u0446\u046c\5n8\2\u0447\u0448")
        buf.write("\5\u0080A\2\u0448\u0449\5~@\t\u0449\u046c\3\2\2\2\u044a")
        buf.write("\u044b\7\22\2\2\u044b\u046c\5~@\b\u044c\u044d\7\u0081")
        buf.write("\2\2\u044d\u0452\5t;\2\u044e\u044f\7\u0083\2\2\u044f\u0451")
        buf.write("\5t;\2\u0450\u044e\3\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450")
        buf.write("\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455\3\2\2\2\u0454")
        buf.write("\u0452\3\2\2\2\u0455\u0456\7\u0082\2\2\u0456\u046c\3\2")
        buf.write("\2\2\u0457\u0458\7Y\2\2\u0458\u0459\7\u0081\2\2\u0459")
        buf.write("\u045c\5t;\2\u045a\u045b\7\u0083\2\2\u045b\u045d\5t;\2")
        buf.write("\u045c\u045a\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u045c\3")
        buf.write("\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0461")
        buf.write("\7\u0082\2\2\u0461\u046c\3\2\2\2\u0462\u0463\7-\2\2\u0463")
        buf.write("\u0464\7\u0081\2\2\u0464\u0465\5\f\7\2\u0465\u0466\7\u0082")
        buf.write("\2\2\u0466\u046c\3\2\2\2\u0467\u0468\7\u0081\2\2\u0468")
        buf.write("\u0469\5\f\7\2\u0469\u046a\7\u0082\2\2\u046a\u046c\3\2")
        buf.write("\2\2\u046b\u0443\3\2\2\2\u046b\u0445\3\2\2\2\u046b\u0446")
        buf.write("\3\2\2\2\u046b\u0447\3\2\2\2\u046b\u044a\3\2\2\2\u046b")
        buf.write("\u044c\3\2\2\2\u046b\u0457\3\2\2\2\u046b\u0462\3\2\2\2")
        buf.write("\u046b\u0467\3\2\2\2\u046c\u0473\3\2\2\2\u046d\u046e\f")
        buf.write("\3\2\2\u046e\u046f\5\u0086D\2\u046f\u0470\5~@\4\u0470")
        buf.write("\u0472\3\2\2\2\u0471\u046d\3\2\2\2\u0472\u0475\3\2\2\2")
        buf.write("\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\177\3\2")
        buf.write("\2\2\u0475\u0473\3\2\2\2\u0476\u0477\t\16\2\2\u0477\u0081")
        buf.write("\3\2\2\2\u0478\u0480\7\r\2\2\u0479\u047a\7\7\2\2\u047a")
        buf.write("\u0480\7\7\2\2\u047b\u0480\7p\2\2\u047c\u0480\7O\2\2\u047d")
        buf.write("\u047e\7\b\2\2\u047e\u0480\7\b\2\2\u047f\u0478\3\2\2\2")
        buf.write("\u047f\u0479\3\2\2\2\u047f\u047b\3\2\2\2\u047f\u047c\3")
        buf.write("\2\2\2\u047f\u047d\3\2\2\2\u0480\u0083\3\2\2\2\u0481\u0490")
        buf.write("\7|\2\2\u0482\u0490\7}\2\2\u0483\u0490\7~\2\2\u0484\u0485")
        buf.write("\7~\2\2\u0485\u0490\7|\2\2\u0486\u0487\7}\2\2\u0487\u0490")
        buf.write("\7|\2\2\u0488\u0489\7~\2\2\u0489\u0490\7}\2\2\u048a\u048b")
        buf.write("\7\177\2\2\u048b\u0490\7|\2\2\u048c\u048d\7~\2\2\u048d")
        buf.write("\u048e\7|\2\2\u048e\u0490\7}\2\2\u048f\u0481\3\2\2\2\u048f")
        buf.write("\u0482\3\2\2\2\u048f\u0483\3\2\2\2\u048f\u0484\3\2\2\2")
        buf.write("\u048f\u0486\3\2\2\2\u048f\u0488\3\2\2\2\u048f\u048a\3")
        buf.write("\2\2\2\u048f\u048c\3\2\2\2\u0490\u0085\3\2\2\2\u0491\u0492")
        buf.write("\t\17\2\2\u0492\u0087\3\2\2\2\u0493\u0496\5\u0098M\2\u0494")
        buf.write("\u0496\7y\2\2\u0495\u0493\3\2\2\2\u0495\u0494\3\2\2\2")
        buf.write("\u0496\u0089\3\2\2\2\u0497\u04a0\5\u00a0Q\2\u0498\u04a0")
        buf.write("\5\u008eH\2\u0499\u04a0\5\u0090I\2\u049a\u04a0\7v\2\2")
        buf.write("\u049b\u049d\7M\2\2\u049c\u049b\3\2\2\2\u049c\u049d\3")
        buf.write("\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\t\20\2\2\u049f")
        buf.write("\u0497\3\2\2\2\u049f\u0498\3\2\2\2\u049f\u0499\3\2\2\2")
        buf.write("\u049f\u049a\3\2\2\2\u049f\u049c\3\2\2\2\u04a0\u008b\3")
        buf.write("\2\2\2\u04a1\u04a3\7M\2\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3")
        buf.write("\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\t\20\2\2\u04a5")
        buf.write("\u008d\3\2\2\2\u04a6\u04a7\7u\2\2\u04a7\u008f\3\2\2\2")
        buf.write("\u04a8\u04a9\t\r\2\2\u04a9\u0091\3\2\2\2\u04aa\u04ae\5")
        buf.write("\u0098M\2\u04ab\u04af\7t\2\2\u04ac\u04ad\7\u0080\2\2\u04ad")
        buf.write("\u04af\5\u0098M\2\u04ae\u04ab\3\2\2\2\u04ae\u04ac\3\2")
        buf.write("\2\2\u04ae\u04af\3\2\2\2\u04af\u0093\3\2\2\2\u04b0\u04b5")
        buf.write("\5\u0098M\2\u04b1\u04b3\5\u009eP\2\u04b2\u04b4\5\u009e")
        buf.write("P\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b6")
        buf.write("\3\2\2\2\u04b5\u04b1\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6")
        buf.write("\u0095\3\2\2\2\u04b7\u04b8\5\u0092J\2\u04b8\u0097\3\2")
        buf.write("\2\2\u04b9\u04bc\7s\2\2\u04ba\u04bc\5\u009cO\2\u04bb\u04b9")
        buf.write("\3\2\2\2\u04bb\u04ba\3\2\2\2\u04bc\u0099\3\2\2\2\u04bd")
        buf.write("\u04c2\5\u0098M\2\u04be\u04bf\7\u0083\2\2\u04bf\u04c1")
        buf.write("\5\u0098M\2\u04c0\u04be\3\2\2\2\u04c1\u04c4\3\2\2\2\u04c2")
        buf.write("\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u009b\3\2\2\2")
        buf.write("\u04c4\u04c2\3\2\2\2\u04c5\u04c6\t\21\2\2\u04c6\u009d")
        buf.write("\3\2\2\2\u04c7\u04cb\7t\2\2\u04c8\u04c9\7\u0080\2\2\u04c9")
        buf.write("\u04cb\5\u0098M\2\u04ca\u04c7\3\2\2\2\u04ca\u04c8\3\2")
        buf.write("\2\2\u04cb\u009f\3\2\2\2\u04cc\u04cd\7w\2\2\u04cd\u00a1")
        buf.write("\3\2\2\2\u04ce\u04db\t\22\2\2\u04cf\u04d0\t\23\2\2\u04d0")
        buf.write("\u04d1\7\u0081\2\2\u04d1\u04d6\7w\2\2\u04d2\u04d3\7\u0083")
        buf.write("\2\2\u04d3\u04d5\7w\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04d8")
        buf.write("\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7")
        buf.write("\u04d9\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9\u04db\7\u0082")
        buf.write("\2\2\u04da\u04ce\3\2\2\2\u04da\u04cf\3\2\2\2\u04db\u00a3")
        buf.write("\3\2\2\2\u00b4\u00a7\u00b2\u00b8\u00bc\u00c6\u00ca\u00ce")
        buf.write("\u00d0\u00d3\u00d6\u00dc\u00e0\u00e3\u00e6\u00e9\u00eb")
        buf.write("\u00f1\u00f6\u00f9\u00fc\u0102\u0107\u010a\u010d\u010f")
        buf.write("\u0119\u0123\u0129\u012e\u0131\u0134\u0138\u013c\u0140")
        buf.write("\u0148\u014e\u0157\u015a\u015e\u0161\u0165\u0168\u016a")
        buf.write("\u016e\u0176\u017f\u0182\u018d\u0190\u0195\u01a1\u01a7")
        buf.write("\u01a9\u01af\u01b1\u01b7\u01bf\u01c4\u01cc\u01cf\u01dd")
        buf.write("\u01e0\u01e6\u01ea\u01f4\u01f8\u01fb\u01ff\u0205\u020b")
        buf.write("\u020f\u0219\u021f\u0223\u0229\u022d\u0238\u0240\u0246")
        buf.write("\u024f\u0252\u0256\u025f\u0264\u026b\u0272\u0279\u0281")
        buf.write("\u0286\u028e\u0291\u0294\u029b\u029e\u02a6\u02a9\u02b4")
        buf.write("\u02b8\u02c3\u02c8\u02ca\u02ce\u02d3\u02da\u02e8\u02f1")
        buf.write("\u02f5\u02f8\u02fb\u0302\u0307\u0309\u030e\u0317\u031c")
        buf.write("\u0326\u0330\u0336\u033b\u0340\u0342\u0346\u0349\u034f")
        buf.write("\u035b\u0365\u0368\u036f\u0390\u0392\u0396\u0398\u039d")
        buf.write("\u03a3\u03a8\u03aa\u03ae\u03b1\u03b4\u03ba\u03bd\u03c1")
        buf.write("\u03c6\u03d5\u03dd\u03e4\u03e8\u03ef\u03f7\u03fc\u0404")
        buf.write("\u040c\u0414\u0419\u041e\u0428\u0431\u0437\u043e\u0440")
        buf.write("\u0452\u045e\u046b\u0473\u047f\u048f\u0495\u049c\u049f")
        buf.write("\u04a2\u04ae\u04b3\u04b5\u04bb\u04c2\u04ca\u04d6\u04da")
        return buf.getvalue()


class SQLFatParser ( Parser ):

    grammarFileName = "SQLFat.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'~'", "'+'", "'-'", "'&'", "'|'", 
                     "'/'", "'%'", "'--'", "'ALL'", "'AND'", "'AS'", "'ASC'", 
                     "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BIT'", "'BLOB'", 
                     "'BOOL'", "'BOOLEAN'", "'BTREE'", "'BY'", "'CHAR'", 
                     "'COLUMNS'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", 
                     "'DATA'", "'DATABASE'", "'DATE'", "'DATETIME'", "'DECIMAL'", 
                     "'DEAFAULT'", "'DELETE'", "'DESC'", "'DISTINCT'", "'DOUBLE'", 
                     "'DROP'", "'DUPLICATE'", "'ENCLOSED'", "'ENUM'", "'ESCAPED'", 
                     "'EXISTS'", "'FALSE'", "'FIELDS'", "'FLOAT'", "'FROM'", 
                     "'FULLTEXT'", "'GROUP'", "'HAVING'", "'HASH'", "'INDEX'", 
                     "'INFILE'", "'IF'", "'IGNORE'", "'IN'", "'INNER'", 
                     "'INSERT'", "'INT'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
                     "'KEYS'", "'LINE'", "'LINES'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LIST'", "'LOAD'", "'LOCAL'", "'NATURAL'", 
                     "'NUMERIC'", "'NOT'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'PARTITION'", "'PARTITIONS'", "'PRIMARY'", "'RANGE'", 
                     "'REAL'", "'REPLACE'", "'RIGHT'", "'ROW'", "'ROWS'", 
                     "'SELECT'", "'SET'", "'STARTING'", "'TABLE'", "'TERMINATED'", 
                     "'TEXT'", "'TIME'", "'TIMESTAMP'", "'TINYINT'", "'TRUNCATE'", 
                     "'TRUE'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'USE'", 
                     "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'", "'VARBINARY'", 
                     "'WHERE'", "'XOR'", "'YEAR'", "'NULL'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':='", "<INVALID>", "'='", 
                     "'>'", "'<'", "'!'", "'.'", "'('", "')'", "','", "';'", 
                     "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ALL", "AND", "AS", "ASC", 
                      "BETWEEN", "BIGINT", "BINARY", "BIT", "BLOB", "BOOL", 
                      "BOOLEAN", "BTREE", "BY", "CHAR", "COLUMNS", "CONSTRAINT", 
                      "CREATE", "CROSS", "DATA", "DATABASE", "DATE", "DATETIME", 
                      "DECIMAL", "DEFAULT", "DELETE", "DESC", "DISTINCT", 
                      "DOUBLE", "DROP", "DUPLICATE", "ENCLOSED", "ENUM", 
                      "ESCAPED", "EXISTS", "FALSE", "FIELDS", "FLOAT", "FROM", 
                      "FULLTEXT", "GROUP", "HAVING", "HASH", "INDEX", "INFILE", 
                      "IF", "IGNORE", "IN", "INNER", "INSERT", "INT", "INTO", 
                      "IS", "JOIN", "KEY", "KEYS", "LINE", "LINES", "LEFT", 
                      "LIKE", "LIMIT", "LIST", "LOAD", "LOCAL", "NATURAL", 
                      "NUMERIC", "NOT", "ON", "OR", "ORDER", "OUTER", "PARTITION", 
                      "PARTITIONS", "PRIMARY", "RANGE", "REAL", "REPLACE", 
                      "RIGHT", "ROW", "ROWS", "SELECT", "SET", "STARTING", 
                      "TABLE", "TERMINATED", "TEXT", "TIME", "TIMESTAMP", 
                      "TINYINT", "TRUNCATE", "TRUE", "UNION", "UNIQUE", 
                      "UPDATE", "USE", "USING", "VALUE", "VALUES", "VARCHAR", 
                      "VARBINARY", "WHERE", "XOR", "YEAR", "NULL_LITERAL", 
                      "ID", "DOT_ID", "DECIMAL_LITERAL", "REAL_LITERAL", 
                      "STRING_LITERAL", "NULL_SPEC_LITERAL", "LOCAL_ID", 
                      "VAR_ASSIGN", "SPACE", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB" ]

    RULE_sqlStatement = 0
    RULE_utilityStatement = 1
    RULE_ddlStatement = 2
    RULE_dmlStatement = 3
    RULE_useStatement = 4
    RULE_selectStatement = 5
    RULE_querySpecification = 6
    RULE_queryExpression = 7
    RULE_queryExpressionNointo = 8
    RULE_querySpecificationNointo = 9
    RULE_unionStatement = 10
    RULE_unionParenthesis = 11
    RULE_selectSpec = 12
    RULE_selectElements = 13
    RULE_selectElement = 14
    RULE_insertStatement = 15
    RULE_loadDataStatement = 16
    RULE_insertStatementValue = 17
    RULE_updatedElement = 18
    RULE_deleteStatement = 19
    RULE_singleDeleteStatement = 20
    RULE_multipleDeleteStatement = 21
    RULE_selectFieldsInto = 22
    RULE_selectLinesInto = 23
    RULE_fromClause = 24
    RULE_orderByClause = 25
    RULE_orderByExpression = 26
    RULE_limitClause = 27
    RULE_groupByItem = 28
    RULE_tableSources = 29
    RULE_tableSource = 30
    RULE_tableSourceItem = 31
    RULE_joinPart = 32
    RULE_createDatabase = 33
    RULE_dropDatabase = 34
    RULE_ifNotExists = 35
    RULE_ifExists = 36
    RULE_createTable = 37
    RULE_dropTable = 38
    RULE_tables = 39
    RULE_truncateTable = 40
    RULE_createDefinitions = 41
    RULE_createDefinition = 42
    RULE_columnDefinition = 43
    RULE_columnConstraint = 44
    RULE_indexColumnDefinition = 45
    RULE_indexType = 46
    RULE_indexColumnNames = 47
    RULE_indexColumnName = 48
    RULE_partitionDefinitions = 49
    RULE_partitionFunctionDefinition = 50
    RULE_tableConstraint = 51
    RULE_createIndex = 52
    RULE_dropIndex = 53
    RULE_functionCall = 54
    RULE_functionArgs = 55
    RULE_functionArg = 56
    RULE_expression = 57
    RULE_expressions = 58
    RULE_expressionsWithDefaults = 59
    RULE_expressionOrDefault = 60
    RULE_predicate = 61
    RULE_expressionAtom = 62
    RULE_unaryOperator = 63
    RULE_logicalOperator = 64
    RULE_comparisonOperator = 65
    RULE_mathOperator = 66
    RULE_assignmentField = 67
    RULE_constant = 68
    RULE_nullNotnull = 69
    RULE_decimalLiteral = 70
    RULE_booleanLiteral = 71
    RULE_fullId = 72
    RULE_fullColumnName = 73
    RULE_tableName = 74
    RULE_uid = 75
    RULE_uidList = 76
    RULE_dataTypeBase = 77
    RULE_dottedId = 78
    RULE_stringLiteral = 79
    RULE_dataType = 80

    ruleNames =  [ "sqlStatement", "utilityStatement", "ddlStatement", "dmlStatement", 
                   "useStatement", "selectStatement", "querySpecification", 
                   "queryExpression", "queryExpressionNointo", "querySpecificationNointo", 
                   "unionStatement", "unionParenthesis", "selectSpec", "selectElements", 
                   "selectElement", "insertStatement", "loadDataStatement", 
                   "insertStatementValue", "updatedElement", "deleteStatement", 
                   "singleDeleteStatement", "multipleDeleteStatement", "selectFieldsInto", 
                   "selectLinesInto", "fromClause", "orderByClause", "orderByExpression", 
                   "limitClause", "groupByItem", "tableSources", "tableSource", 
                   "tableSourceItem", "joinPart", "createDatabase", "dropDatabase", 
                   "ifNotExists", "ifExists", "createTable", "dropTable", 
                   "tables", "truncateTable", "createDefinitions", "createDefinition", 
                   "columnDefinition", "columnConstraint", "indexColumnDefinition", 
                   "indexType", "indexColumnNames", "indexColumnName", "partitionDefinitions", 
                   "partitionFunctionDefinition", "tableConstraint", "createIndex", 
                   "dropIndex", "functionCall", "functionArgs", "functionArg", 
                   "expression", "expressions", "expressionsWithDefaults", 
                   "expressionOrDefault", "predicate", "expressionAtom", 
                   "unaryOperator", "logicalOperator", "comparisonOperator", 
                   "mathOperator", "assignmentField", "constant", "nullNotnull", 
                   "decimalLiteral", "booleanLiteral", "fullId", "fullColumnName", 
                   "tableName", "uid", "uidList", "dataTypeBase", "dottedId", 
                   "stringLiteral", "dataType" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    ALL=10
    AND=11
    AS=12
    ASC=13
    BETWEEN=14
    BIGINT=15
    BINARY=16
    BIT=17
    BLOB=18
    BOOL=19
    BOOLEAN=20
    BTREE=21
    BY=22
    CHAR=23
    COLUMNS=24
    CONSTRAINT=25
    CREATE=26
    CROSS=27
    DATA=28
    DATABASE=29
    DATE=30
    DATETIME=31
    DECIMAL=32
    DEFAULT=33
    DELETE=34
    DESC=35
    DISTINCT=36
    DOUBLE=37
    DROP=38
    DUPLICATE=39
    ENCLOSED=40
    ENUM=41
    ESCAPED=42
    EXISTS=43
    FALSE=44
    FIELDS=45
    FLOAT=46
    FROM=47
    FULLTEXT=48
    GROUP=49
    HAVING=50
    HASH=51
    INDEX=52
    INFILE=53
    IF=54
    IGNORE=55
    IN=56
    INNER=57
    INSERT=58
    INT=59
    INTO=60
    IS=61
    JOIN=62
    KEY=63
    KEYS=64
    LINE=65
    LINES=66
    LEFT=67
    LIKE=68
    LIMIT=69
    LIST=70
    LOAD=71
    LOCAL=72
    NATURAL=73
    NUMERIC=74
    NOT=75
    ON=76
    OR=77
    ORDER=78
    OUTER=79
    PARTITION=80
    PARTITIONS=81
    PRIMARY=82
    RANGE=83
    REAL=84
    REPLACE=85
    RIGHT=86
    ROW=87
    ROWS=88
    SELECT=89
    SET=90
    STARTING=91
    TABLE=92
    TERMINATED=93
    TEXT=94
    TIME=95
    TIMESTAMP=96
    TINYINT=97
    TRUNCATE=98
    TRUE=99
    UNION=100
    UNIQUE=101
    UPDATE=102
    USE=103
    USING=104
    VALUE=105
    VALUES=106
    VARCHAR=107
    VARBINARY=108
    WHERE=109
    XOR=110
    YEAR=111
    NULL_LITERAL=112
    ID=113
    DOT_ID=114
    DECIMAL_LITERAL=115
    REAL_LITERAL=116
    STRING_LITERAL=117
    NULL_SPEC_LITERAL=118
    LOCAL_ID=119
    VAR_ASSIGN=120
    SPACE=121
    EQUAL_SYMBOL=122
    GREATER_SYMBOL=123
    LESS_SYMBOL=124
    EXCLAMATION_SYMBOL=125
    DOT=126
    LR_BRACKET=127
    RR_BRACKET=128
    COMMA=129
    SEMI=130
    AT_SIGN=131
    ZERO_DECIMAL=132
    ONE_DECIMAL=133
    TWO_DECIMAL=134
    SINGLE_QUOTE_SYMB=135
    DOUBLE_QUOTE_SYMB=136
    REVERSE_QUOTE_SYMB=137
    COLON_SYMB=138

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DmlStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(SQLFatParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = SQLFatParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sqlStatement)
        try:
            self.state = 165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.CREATE, SQLFatParser.DROP, SQLFatParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self.ddlStatement()
                pass
            elif token in [SQLFatParser.DELETE, SQLFatParser.INSERT, SQLFatParser.LOAD, SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 163
                self.dmlStatement()
                pass
            elif token in [SQLFatParser.USE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 164
                self.utilityStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useStatement(self):
            return self.getTypedRuleContext(SQLFatParser.UseStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = SQLFatParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_utilityStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.useStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(SQLFatParser.CreateTableContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(SQLFatParser.CreateIndexContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(SQLFatParser.DropDatabaseContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(SQLFatParser.DropIndexContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(SQLFatParser.DropTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(SQLFatParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = SQLFatParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ddlStatement)
        try:
            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 169
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 170
                self.createTable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 171
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 172
                self.dropDatabase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 173
                self.dropIndex()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 174
                self.dropTable()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 175
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(SQLFatParser.InsertStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.DeleteStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(SQLFatParser.LoadDataStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = SQLFatParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_dmlStatement)
        try:
            self.state = 182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.selectStatement()
                pass
            elif token in [SQLFatParser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self.insertStatement()
                pass
            elif token in [SQLFatParser.DELETE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 180
                self.deleteStatement()
                pass
            elif token in [SQLFatParser.LOAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 181
                self.loadDataStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SQLFatParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(SQLFatParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = SQLFatParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_useStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self.match(SQLFatParser.USE)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.DATABASE:
                self.state = 185
                self.match(SQLFatParser.DATABASE)


            self.state = 188
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = SQLFatParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.querySpecification()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.queryExpression()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 192
                self.querySpecificationNointo()
                self.state = 194 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 193
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 196 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.UNION:
                    self.state = 198
                    self.match(SQLFatParser.UNION)
                    self.state = 200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                        self.state = 199
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 204
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLFatParser.SELECT]:
                        self.state = 202
                        self.querySpecification()
                        pass
                    elif token in [SQLFatParser.LR_BRACKET]:
                        self.state = 203
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.ORDER:
                    self.state = 208
                    self.orderByClause()


                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LIMIT:
                    self.state = 211
                    self.limitClause()


                pass

            elif la_ == 4:
                localctx = SQLFatParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 214
                self.queryExpressionNointo()
                self.state = 216 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 215
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 218 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.UNION:
                    self.state = 220
                    self.match(SQLFatParser.UNION)
                    self.state = 222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                        self.state = 221
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 224
                    self.queryExpression()


                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.ORDER:
                    self.state = 227
                    self.orderByClause()


                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LIMIT:
                    self.state = 230
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLFatParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SQLFatParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SQLFatParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SQLFatParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.match(SQLFatParser.SELECT)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                    self.state = 236
                    self.selectSpec()
                    self.state = 241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 242
                self.selectElements()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.FROM:
                    self.state = 243
                    self.fromClause()


                self.state = 247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 246
                    self.orderByClause()


                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 249
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.match(SQLFatParser.SELECT)
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                    self.state = 253
                    self.selectSpec()
                    self.state = 258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 259
                self.selectElements()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.FROM:
                    self.state = 260
                    self.fromClause()


                self.state = 264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 263
                    self.orderByClause()


                self.state = 267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 266
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = SQLFatParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_queryExpression)
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 272
                self.querySpecification()
                self.state = 273
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 276
                self.queryExpression()
                self.state = 277
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = SQLFatParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_queryExpressionNointo)
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 282
                self.querySpecificationNointo()
                self.state = 283
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 286
                self.queryExpressionNointo()
                self.state = 287
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLFatParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SQLFatParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SQLFatParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SQLFatParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = SQLFatParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(SQLFatParser.SELECT)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 292
                self.selectSpec()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.selectElements()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.FROM:
                self.state = 299
                self.fromClause()


            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 302
                self.orderByClause()


            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 305
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = SQLFatParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(SQLFatParser.UNION)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 309
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT]:
                self.state = 312
                self.querySpecificationNointo()
                pass
            elif token in [SQLFatParser.LR_BRACKET]:
                self.state = 313
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SQLFatParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(SQLFatParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = SQLFatParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(SQLFatParser.UNION)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT:
                self.state = 317
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 320
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SQLFatParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SQLFatParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = SQLFatParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.ALL or _la==SQLFatParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectElementContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = SQLFatParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__0]:
                self.state = 324
                localctx.star = self.match(SQLFatParser.T__0)
                pass
            elif token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.state = 325
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 328
                self.match(SQLFatParser.COMMA)
                self.state = 329
                self.selectElement()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = SQLFatParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.fullId()
                self.state = 336
                self.match(SQLFatParser.DOT)
                self.state = 337
                self.match(SQLFatParser.T__0)
                pass

            elif la_ == 2:
                localctx = SQLFatParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.fullColumnName()
                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 340
                        self.match(SQLFatParser.AS)


                    self.state = 343
                    self.uid()


                pass

            elif la_ == 3:
                localctx = SQLFatParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 346
                self.functionCall()
                self.state = 351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 347
                        self.match(SQLFatParser.AS)


                    self.state = 350
                    self.uid()


                pass

            elif la_ == 4:
                localctx = SQLFatParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 353
                self.expression(0)
                self.state = 358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 354
                        self.match(SQLFatParser.AS)


                    self.state = 357
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(SQLFatParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SQLFatParser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(SQLFatParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def IGNORE(self):
            return self.getToken(SQLFatParser.IGNORE, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(SQLFatParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(SQLFatParser.UPDATE, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = SQLFatParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SQLFatParser.INSERT)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IGNORE:
                self.state = 363
                self.match(SQLFatParser.IGNORE)


            self.state = 366
            self.match(SQLFatParser.INTO)
            self.state = 367
            self.tableName()
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.VALUE, SQLFatParser.VALUES, SQLFatParser.LR_BRACKET]:
                self.state = 372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 369
                    localctx.columns = self.uidList()
                    self.state = 370
                    self.match(SQLFatParser.RR_BRACKET)


                self.state = 374
                self.insertStatementValue()
                pass
            elif token in [SQLFatParser.SET]:
                self.state = 375
                self.match(SQLFatParser.SET)
                self.state = 376
                localctx.setFirst = self.updatedElement()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 377
                    self.match(SQLFatParser.COMMA)
                    self.state = 378
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ON:
                self.state = 386
                self.match(SQLFatParser.ON)
                self.state = 387
                self.match(SQLFatParser.DUPLICATE)
                self.state = 388
                self.match(SQLFatParser.KEY)
                self.state = 389
                self.match(SQLFatParser.UPDATE)
                self.state = 390
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 391
                    self.match(SQLFatParser.COMMA)
                    self.state = 392
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadDataStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.filename = None # Token
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(SQLFatParser.LOAD, 0)

        def DATA(self):
            return self.getToken(SQLFatParser.DATA, 0)

        def INFILE(self):
            return self.getToken(SQLFatParser.INFILE, 0)

        def INTO(self):
            return self.getToken(SQLFatParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(SQLFatParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(SQLFatParser.LINES)
            else:
                return self.getToken(SQLFatParser.LINES, i)

        def IGNORE(self):
            return self.getToken(SQLFatParser.IGNORE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.AssignmentFieldContext,i)


        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UpdatedElementContext,i)


        def FIELDS(self):
            return self.getToken(SQLFatParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(SQLFatParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(SQLFatParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.SelectLinesIntoContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = SQLFatParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(SQLFatParser.LOAD)
            self.state = 401
            self.match(SQLFatParser.DATA)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LOCAL:
                self.state = 402
                self.match(SQLFatParser.LOCAL)


            self.state = 405
            self.match(SQLFatParser.INFILE)
            self.state = 406
            localctx.filename = self.match(SQLFatParser.STRING_LITERAL)
            self.state = 407
            self.match(SQLFatParser.INTO)
            self.state = 408
            self.match(SQLFatParser.TABLE)
            self.state = 409
            self.tableName()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITION:
                self.state = 410
                self.match(SQLFatParser.PARTITION)
                self.state = 411
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 412
                self.uidList()
                self.state = 413
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.COLUMNS or _la==SQLFatParser.FIELDS:
                self.state = 417
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.COLUMNS or _la==SQLFatParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 419 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 418
                    self.selectFieldsInto()
                    self.state = 421 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (SQLFatParser.ENCLOSED - 40)) | (1 << (SQLFatParser.ESCAPED - 40)) | (1 << (SQLFatParser.TERMINATED - 40)))) != 0)):
                        break



            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LINES:
                self.state = 425
                self.match(SQLFatParser.LINES)
                self.state = 427 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 426
                    self.selectLinesInto()
                    self.state = 429 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLFatParser.STARTING or _la==SQLFatParser.TERMINATED):
                        break



            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IGNORE:
                self.state = 433
                self.match(SQLFatParser.IGNORE)
                self.state = 434
                self.decimalLiteral()
                self.state = 435
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.LINES or _la==SQLFatParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LR_BRACKET:
                self.state = 439
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 440
                self.assignmentField()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 441
                    self.match(SQLFatParser.COMMA)
                    self.state = 442
                    self.assignmentField()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 448
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.SET:
                self.state = 452
                self.match(SQLFatParser.SET)
                self.state = 453
                self.updatedElement()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 454
                    self.match(SQLFatParser.COMMA)
                    self.state = 455
                    self.updatedElement()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionsWithDefaultsContext,i)


        def VALUES(self):
            return self.getToken(SQLFatParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(SQLFatParser.VALUE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = SQLFatParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.SELECT, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.selectStatement()
                pass
            elif token in [SQLFatParser.VALUE, SQLFatParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.VALUE or _la==SQLFatParser.VALUES):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 465
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 466
                self.expressionsWithDefaults()
                self.state = 467
                self.match(SQLFatParser.RR_BRACKET)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 468
                    self.match(SQLFatParser.COMMA)
                    self.state = 469
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 470
                    self.expressionsWithDefaults()
                    self.state = 471
                    self.match(SQLFatParser.RR_BRACKET)
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SQLFatParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = SQLFatParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.fullColumnName()
            self.state = 481
            self.match(SQLFatParser.EQUAL_SYMBOL)
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.state = 482
                self.expression(0)
                pass
            elif token in [SQLFatParser.DEFAULT]:
                self.state = 483
                self.match(SQLFatParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(SQLFatParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = SQLFatParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_deleteStatement)
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLFatParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SQLFatParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(SQLFatParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = SQLFatParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(SQLFatParser.DELETE)
            self.state = 491
            self.match(SQLFatParser.FROM)
            self.state = 492
            self.tableName()
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITION:
                self.state = 493
                self.match(SQLFatParser.PARTITION)
                self.state = 494
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 495
                self.uidList()
                self.state = 496
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 500
                self.match(SQLFatParser.WHERE)
                self.state = 501
                self.expression(0)


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ORDER:
                self.state = 504
                self.orderByClause()


            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LIMIT:
                self.state = 507
                self.match(SQLFatParser.LIMIT)
                self.state = 508
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLFatParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)

        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = SQLFatParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(SQLFatParser.DELETE)
            self.state = 551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                self.state = 512
                self.tableName()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.DOT:
                    self.state = 513
                    self.match(SQLFatParser.DOT)
                    self.state = 514
                    self.match(SQLFatParser.T__0)


                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 517
                    self.match(SQLFatParser.COMMA)
                    self.state = 518
                    self.tableName()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.DOT:
                        self.state = 519
                        self.match(SQLFatParser.DOT)
                        self.state = 520
                        self.match(SQLFatParser.T__0)


                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 528
                self.match(SQLFatParser.FROM)
                self.state = 529
                self.tableSources()
                pass
            elif token in [SQLFatParser.FROM]:
                self.state = 531
                self.match(SQLFatParser.FROM)
                self.state = 532
                self.tableName()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.DOT:
                    self.state = 533
                    self.match(SQLFatParser.DOT)
                    self.state = 534
                    self.match(SQLFatParser.T__0)


                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 537
                    self.match(SQLFatParser.COMMA)
                    self.state = 538
                    self.tableName()
                    self.state = 541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.DOT:
                        self.state = 539
                        self.match(SQLFatParser.DOT)
                        self.state = 540
                        self.match(SQLFatParser.T__0)


                    self.state = 547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 548
                self.match(SQLFatParser.USING)
                self.state = 549
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 553
                self.match(SQLFatParser.WHERE)
                self.state = 554
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectFieldsIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(SQLFatParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(SQLFatParser.ENCLOSED, 0)

        def ESCAPED(self):
            return self.getToken(SQLFatParser.ESCAPED, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = SQLFatParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_selectFieldsInto)
        try:
            self.state = 566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(SQLFatParser.TERMINATED)
                self.state = 558
                self.match(SQLFatParser.BY)
                self.state = 559
                localctx.terminationField = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.ENCLOSED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 560
                self.match(SQLFatParser.ENCLOSED)
                self.state = 561
                self.match(SQLFatParser.BY)
                self.state = 562
                localctx.enclosion = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self.match(SQLFatParser.ESCAPED)
                self.state = 564
                self.match(SQLFatParser.BY)
                self.state = 565
                localctx.escaping = self.match(SQLFatParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectLinesIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(SQLFatParser.STARTING, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(SQLFatParser.TERMINATED, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = SQLFatParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selectLinesInto)
        try:
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.match(SQLFatParser.STARTING)
                self.state = 569
                self.match(SQLFatParser.BY)
                self.state = 570
                localctx.starting = self.match(SQLFatParser.STRING_LITERAL)
                pass
            elif token in [SQLFatParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self.match(SQLFatParser.TERMINATED)
                self.state = 572
                self.match(SQLFatParser.BY)
                self.state = 573
                localctx.terminationLine = self.match(SQLFatParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(SQLFatParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(SQLFatParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SQLFatParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(SQLFatParser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SQLFatParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SQLFatParser.FROM)
            self.state = 577
            self.tableSources()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.WHERE:
                self.state = 578
                self.match(SQLFatParser.WHERE)
                self.state = 579
                localctx.whereExpr = self.expression(0)


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.GROUP:
                self.state = 582
                self.match(SQLFatParser.GROUP)
                self.state = 583
                self.match(SQLFatParser.BY)
                self.state = 584
                self.groupByItem()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 585
                    self.match(SQLFatParser.COMMA)
                    self.state = 586
                    self.groupByItem()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.HAVING:
                self.state = 594
                self.match(SQLFatParser.HAVING)
                self.state = 595
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLFatParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.OrderByExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = SQLFatParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(SQLFatParser.ORDER)
            self.state = 599
            self.match(SQLFatParser.BY)
            self.state = 600
            self.orderByExpression()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 601
                self.match(SQLFatParser.COMMA)
                self.state = 602
                self.orderByExpression()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = SQLFatParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.expression(0)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 609
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(SQLFatParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = SQLFatParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SQLFatParser.LIMIT)

            self.state = 613
            localctx.limit = self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = SQLFatParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.expression(0)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 616
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableSourceContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = SQLFatParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.tableSource()
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 620
                self.match(SQLFatParser.COMMA)
                self.state = 621
                self.tableSource()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = SQLFatParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.tableSourceItem()
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (SQLFatParser.CROSS - 27)) | (1 << (SQLFatParser.INNER - 27)) | (1 << (SQLFatParser.JOIN - 27)) | (1 << (SQLFatParser.LEFT - 27)) | (1 << (SQLFatParser.NATURAL - 27)) | (1 << (SQLFatParser.RIGHT - 27)))) != 0):
                    self.state = 628
                    self.joinPart()
                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SQLFatParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 635
                self.tableSourceItem()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (SQLFatParser.CROSS - 27)) | (1 << (SQLFatParser.INNER - 27)) | (1 << (SQLFatParser.JOIN - 27)) | (1 << (SQLFatParser.LEFT - 27)) | (1 << (SQLFatParser.NATURAL - 27)) | (1 << (SQLFatParser.RIGHT - 27)))) != 0):
                    self.state = 636
                    self.joinPart()
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 642
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSources(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourcesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = SQLFatParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.tableName()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 647
                    self.match(SQLFatParser.PARTITION)
                    self.state = 648
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 649
                    self.uidList()
                    self.state = 650
                    self.match(SQLFatParser.RR_BRACKET)


                self.state = 658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.AS:
                        self.state = 654
                        self.match(SQLFatParser.AS)


                    self.state = 657
                    localctx.alias = self.uid()


                pass

            elif la_ == 2:
                localctx = SQLFatParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 661
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 662
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 663
                    self.match(SQLFatParser.RR_BRACKET)
                    pass


                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.AS:
                    self.state = 667
                    self.match(SQLFatParser.AS)


                self.state = 670
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 672
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 673
                self.tableSources()
                self.state = 674
                self.match(SQLFatParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def INNER(self):
            return self.getToken(SQLFatParser.INNER, 0)
        def CROSS(self):
            return self.getToken(SQLFatParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(SQLFatParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SQLFatParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SQLFatParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(SQLFatParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SQLFatParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SQLFatParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SQLFatParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SQLFatParser.RIGHT, 0)
        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)

        def OUTER(self):
            return self.getToken(SQLFatParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)



    def joinPart(self):

        localctx = SQLFatParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.CROSS, SQLFatParser.INNER, SQLFatParser.JOIN]:
                localctx = SQLFatParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CROSS or _la==SQLFatParser.INNER:
                    self.state = 678
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.CROSS or _la==SQLFatParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 681
                self.match(SQLFatParser.JOIN)
                self.state = 682
                self.tableSourceItem()
                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 683
                    self.match(SQLFatParser.ON)
                    self.state = 684
                    self.expression(0)

                elif la_ == 2:
                    self.state = 685
                    self.match(SQLFatParser.USING)
                    self.state = 686
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 687
                    self.uidList()
                    self.state = 688
                    self.match(SQLFatParser.RR_BRACKET)


                pass
            elif token in [SQLFatParser.LEFT, SQLFatParser.RIGHT]:
                localctx = SQLFatParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.OUTER:
                    self.state = 693
                    self.match(SQLFatParser.OUTER)


                self.state = 696
                self.match(SQLFatParser.JOIN)
                self.state = 697
                self.tableSourceItem()
                self.state = 705
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLFatParser.ON]:
                    self.state = 698
                    self.match(SQLFatParser.ON)
                    self.state = 699
                    self.expression(0)
                    pass
                elif token in [SQLFatParser.USING]:
                    self.state = 700
                    self.match(SQLFatParser.USING)
                    self.state = 701
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 702
                    self.uidList()
                    self.state = 703
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SQLFatParser.NATURAL]:
                localctx = SQLFatParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.match(SQLFatParser.NATURAL)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT:
                    self.state = 708
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.LEFT or _la==SQLFatParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLFatParser.OUTER:
                        self.state = 709
                        self.match(SQLFatParser.OUTER)




                self.state = 714
                self.match(SQLFatParser.JOIN)
                self.state = 715
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SQLFatParser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = SQLFatParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(SQLFatParser.CREATE)
            self.state = 719
            self.match(SQLFatParser.DATABASE)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 720
                self.ifNotExists()


            self.state = 723
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(SQLFatParser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = SQLFatParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(SQLFatParser.DROP)
            self.state = 726
            self.match(SQLFatParser.DATABASE)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 727
                self.ifExists()


            self.state = 730
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLFatParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = SQLFatParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(SQLFatParser.IF)
            self.state = 733
            self.match(SQLFatParser.NOT)
            self.state = 734
            self.match(SQLFatParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLFatParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = SQLFatParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(SQLFatParser.IF)
            self.state = 737
            self.match(SQLFatParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(SQLFatParser.LIKE, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDefinitionsContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionDefinitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.CreateDefinitionsContext,0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(SQLFatParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = SQLFatParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.match(SQLFatParser.CREATE)
                self.state = 740
                self.match(SQLFatParser.TABLE)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 741
                    self.ifNotExists()


                self.state = 744
                self.tableName()

                self.state = 745
                self.match(SQLFatParser.LIKE)
                self.state = 746
                self.tableName()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.match(SQLFatParser.CREATE)
                self.state = 749
                self.match(SQLFatParser.TABLE)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 750
                    self.ifNotExists()


                self.state = 753
                self.tableName()
                self.state = 755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 754
                    self.createDefinitions()


                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 757
                    self.partitionDefinitions()


                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.AS:
                    self.state = 760
                    self.match(SQLFatParser.AS)


                self.state = 763
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 765
                self.match(SQLFatParser.CREATE)
                self.state = 766
                self.match(SQLFatParser.TABLE)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.IF:
                    self.state = 767
                    self.ifNotExists()


                self.state = 770
                self.tableName()
                self.state = 771
                self.createDefinitions()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PARTITION:
                    self.state = 772
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(SQLFatParser.TablesContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(SQLFatParser.IfExistsContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = SQLFatParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(SQLFatParser.DROP)
            self.state = 778
            self.match(SQLFatParser.TABLE)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.IF:
                self.state = 779
                self.ifExists()


            self.state = 782
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.TableNameContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = SQLFatParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.tableName()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 785
                self.match(SQLFatParser.COMMA)
                self.state = 786
                self.tableName()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TruncateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(SQLFatParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(SQLFatParser.TABLE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = SQLFatParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(SQLFatParser.TRUNCATE)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.TABLE:
                self.state = 793
                self.match(SQLFatParser.TABLE)


            self.state = 796
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.CreateDefinitionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = SQLFatParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 799
            self.createDefinition()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 800
                self.match(SQLFatParser.COMMA)
                self.state = 801
                self.createDefinition()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 807
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(SQLFatParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = SQLFatParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_createDefinition)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                localctx = SQLFatParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.uid()
                self.state = 810
                self.columnDefinition()
                pass
            elif token in [SQLFatParser.CONSTRAINT, SQLFatParser.PRIMARY, SQLFatParser.UNIQUE]:
                localctx = SQLFatParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.tableConstraint()
                pass
            elif token in [SQLFatParser.INDEX, SQLFatParser.KEY]:
                localctx = SQLFatParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SQLFatParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = SQLFatParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.dataType()
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (SQLFatParser.KEY - 63)) | (1 << (SQLFatParser.NOT - 63)) | (1 << (SQLFatParser.PRIMARY - 63)) | (1 << (SQLFatParser.UNIQUE - 63)) | (1 << (SQLFatParser.NULL_LITERAL - 63)) | (1 << (SQLFatParser.NULL_SPEC_LITERAL - 63)))) != 0):
                self.state = 817
                self.columnConstraint()
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(SQLFatParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(SQLFatParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)



    def columnConstraint(self):

        localctx = SQLFatParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.NOT, SQLFatParser.NULL_LITERAL, SQLFatParser.NULL_SPEC_LITERAL]:
                localctx = SQLFatParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 823
                self.nullNotnull()
                pass
            elif token in [SQLFatParser.KEY, SQLFatParser.PRIMARY]:
                localctx = SQLFatParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.PRIMARY:
                    self.state = 824
                    self.match(SQLFatParser.PRIMARY)


                self.state = 827
                self.match(SQLFatParser.KEY)
                pass
            elif token in [SQLFatParser.UNIQUE]:
                localctx = SQLFatParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.match(SQLFatParser.UNIQUE)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 829
                    self.match(SQLFatParser.KEY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)

        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = SQLFatParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            localctx = SQLFatParser.SimpleIndexDeclarationContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            localctx.indexFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.INDEX or _la==SQLFatParser.KEY):
                localctx.indexFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                self.state = 835
                self.uid()


            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.USING:
                self.state = 838
                self.indexType()


            self.state = 841
            self.indexColumnNames()
            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.USING:
                self.state = 842
                self.indexType()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SQLFatParser.USING, 0)

        def BTREE(self):
            return self.getToken(SQLFatParser.BTREE, 0)

        def HASH(self):
            return self.getToken(SQLFatParser.HASH, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = SQLFatParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(SQLFatParser.USING)
            self.state = 849
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.BTREE or _la==SQLFatParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexColumnNameContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = SQLFatParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 852
            self.indexColumnName()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 853
                self.match(SQLFatParser.COMMA)
                self.state = 854
                self.indexColumnName()
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 860
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(SQLFatParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLFatParser.DESC, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = SQLFatParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.uid()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LR_BRACKET:
                self.state = 863
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 864
                self.decimalLiteral()
                self.state = 865
                self.match(SQLFatParser.RR_BRACKET)


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.ASC or _la==SQLFatParser.DESC:
                self.state = 869
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ASC or _la==SQLFatParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(SQLFatParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SQLFatParser.BY, 0)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(SQLFatParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(SQLFatParser.PARTITIONS, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = SQLFatParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(SQLFatParser.PARTITION)
            self.state = 873
            self.match(SQLFatParser.BY)
            self.state = 874
            self.partitionFunctionDefinition()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.PARTITIONS:
                self.state = 875
                self.match(SQLFatParser.PARTITIONS)
                self.state = 876
                localctx.count = self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.func = None # ExpressionContext
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(SQLFatParser.HASH, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(SQLFatParser.LIST, 0)
        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def COLUMNS(self):
            return self.getToken(SQLFatParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(SQLFatParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.low = None # ExpressionContext
            self.high = None # ExpressionContext
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(SQLFatParser.RANGE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = SQLFatParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_partitionFunctionDefinition)
        try:
            self.state = 912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.HASH]:
                localctx = SQLFatParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(SQLFatParser.HASH)
                self.state = 880
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 881
                self.expression(0)
                self.state = 882
                self.match(SQLFatParser.COMMA)
                self.state = 883
                localctx.func = self.expression(0)
                self.state = 884
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.KEY]:
                localctx = SQLFatParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(SQLFatParser.KEY)
                self.state = 887
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 888
                self.uidList()
                self.state = 889
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.RANGE]:
                localctx = SQLFatParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                self.match(SQLFatParser.RANGE)
                self.state = 892
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 893
                self.expression(0)
                self.state = 894
                self.match(SQLFatParser.COMMA)
                self.state = 895
                localctx.low = self.expression(0)
                self.state = 896
                self.match(SQLFatParser.COMMA)
                self.state = 897
                localctx.high = self.expression(0)
                self.state = 898
                self.match(SQLFatParser.RR_BRACKET)
                pass
            elif token in [SQLFatParser.LIST]:
                localctx = SQLFatParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 900
                self.match(SQLFatParser.LIST)
                self.state = 910
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLFatParser.LR_BRACKET]:
                    self.state = 901
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 902
                    self.expression(0)
                    self.state = 903
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                elif token in [SQLFatParser.COLUMNS]:
                    self.state = 905
                    self.match(SQLFatParser.COLUMNS)
                    self.state = 906
                    self.match(SQLFatParser.LR_BRACKET)
                    self.state = 907
                    self.uidList()
                    self.state = 908
                    self.match(SQLFatParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SQLFatParser.CONSTRAINT, 0)
        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(SQLFatParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(SQLFatParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(SQLFatParser.CONSTRAINT, 0)
        def indexType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.IndexTypeContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,i)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = SQLFatParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CONSTRAINT:
                    self.state = 914
                    self.match(SQLFatParser.CONSTRAINT)
                    self.state = 916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                        self.state = 915
                        localctx.name = self.uid()




                self.state = 920
                self.match(SQLFatParser.PRIMARY)
                self.state = 921
                self.match(SQLFatParser.KEY)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.USING:
                    self.state = 922
                    self.indexType()


                self.state = 925
                self.indexColumnNames()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.USING:
                    self.state = 926
                    self.indexType()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SQLFatParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.CONSTRAINT:
                    self.state = 932
                    self.match(SQLFatParser.CONSTRAINT)
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                        self.state = 933
                        localctx.name = self.uid()




                self.state = 938
                self.match(SQLFatParser.UNIQUE)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.INDEX or _la==SQLFatParser.KEY:
                    self.state = 939
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SQLFatParser.INDEX or _la==SQLFatParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)) | (1 << (SQLFatParser.ID - 94)))) != 0):
                    self.state = 942
                    localctx.index = self.uid()


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.USING:
                    self.state = 945
                    self.indexType()


                self.state = 948
                self.indexColumnNames()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.USING:
                    self.state = 949
                    self.indexType()
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexCategory = None # Token

        def CREATE(self):
            return self.getToken(SQLFatParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(SQLFatParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(SQLFatParser.IndexTypeContext,0)


        def UNIQUE(self):
            return self.getToken(SQLFatParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(SQLFatParser.FULLTEXT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = SQLFatParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(SQLFatParser.CREATE)
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.FULLTEXT or _la==SQLFatParser.UNIQUE:
                self.state = 958
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.FULLTEXT or _la==SQLFatParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 961
            self.match(SQLFatParser.INDEX)
            self.state = 962
            self.uid()
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.USING:
                self.state = 963
                self.indexType()


            self.state = 966
            self.match(SQLFatParser.ON)
            self.state = 967
            self.tableName()
            self.state = 968
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SQLFatParser.DROP, 0)

        def INDEX(self):
            return self.getToken(SQLFatParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def ON(self):
            return self.getToken(SQLFatParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(SQLFatParser.TableNameContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = SQLFatParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(SQLFatParser.DROP)
            self.state = 971
            self.match(SQLFatParser.INDEX)
            self.state = 972
            self.uid()
            self.state = 973
            self.match(SQLFatParser.ON)
            self.state = 974
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)



    def functionCall(self):

        localctx = SQLFatParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            localctx = SQLFatParser.UdfFunctionCallContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.fullId()
            self.state = 977
            self.match(SQLFatParser.LR_BRACKET)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__1) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3) | (1 << SQLFatParser.BINARY) | (1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM) | (1 << SQLFatParser.EXISTS) | (1 << SQLFatParser.FALSE))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (SQLFatParser.NOT - 75)) | (1 << (SQLFatParser.ROW - 75)) | (1 << (SQLFatParser.TEXT - 75)) | (1 << (SQLFatParser.TIME - 75)) | (1 << (SQLFatParser.TIMESTAMP - 75)) | (1 << (SQLFatParser.TRUE - 75)) | (1 << (SQLFatParser.YEAR - 75)) | (1 << (SQLFatParser.NULL_LITERAL - 75)) | (1 << (SQLFatParser.ID - 75)) | (1 << (SQLFatParser.DECIMAL_LITERAL - 75)) | (1 << (SQLFatParser.REAL_LITERAL - 75)) | (1 << (SQLFatParser.STRING_LITERAL - 75)) | (1 << (SQLFatParser.NULL_SPEC_LITERAL - 75)) | (1 << (SQLFatParser.LOCAL_ID - 75)) | (1 << (SQLFatParser.EXCLAMATION_SYMBOL - 75)) | (1 << (SQLFatParser.LR_BRACKET - 75)))) != 0):
                self.state = 978
                self.functionArgs()


            self.state = 981
            self.match(SQLFatParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = SQLFatParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 983
                self.constant()
                pass

            elif la_ == 2:
                self.state = 984
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 985
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 986
                self.expression(0)
                pass


            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 989
                self.match(SQLFatParser.COMMA)
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 991
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 992
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 993
                    self.expression(0)
                    pass


                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SQLFatParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = SQLFatParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_functionArg)
        try:
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1003
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1004
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SQLFatParser.IS, 0)
        def TRUE(self):
            return self.getToken(SQLFatParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(SQLFatParser.FALSE, 0)
        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(SQLFatParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1008
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.NOT or _la==SQLFatParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1009
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = SQLFatParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1010
                self.predicate(0)
                self.state = 1011
                self.match(SQLFatParser.IS)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.NOT:
                    self.state = 1012
                    self.match(SQLFatParser.NOT)


                self.state = 1015
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.FALSE or _la==SQLFatParser.TRUE):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1017
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLFatParser.LogicalExpressionContext(self, SQLFatParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 1020
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1021
                    self.logicalOperator()
                    self.state = 1022
                    self.expression(4) 
                self.state = 1028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = SQLFatParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.expression(0)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1030
                self.match(SQLFatParser.COMMA)
                self.state = 1031
                self.expression(0)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionOrDefaultContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = SQLFatParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.expressionOrDefault()
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1038
                self.match(SQLFatParser.COMMA)
                self.state = 1039
                self.expressionOrDefault()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SQLFatParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = SQLFatParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expressionOrDefault)
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.T__1, SQLFatParser.T__2, SQLFatParser.T__3, SQLFatParser.BINARY, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.EXISTS, SQLFatParser.FALSE, SQLFatParser.NOT, SQLFatParser.ROW, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TRUE, SQLFatParser.YEAR, SQLFatParser.NULL_LITERAL, SQLFatParser.ID, SQLFatParser.DECIMAL_LITERAL, SQLFatParser.REAL_LITERAL, SQLFatParser.STRING_LITERAL, SQLFatParser.NULL_SPEC_LITERAL, SQLFatParser.LOCAL_ID, SQLFatParser.EXCLAMATION_SYMBOL, SQLFatParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1045
                self.expression(0)
                pass
            elif token in [SQLFatParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1046
                self.match(SQLFatParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(SQLFatParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SQLFatParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IN(self):
            return self.getToken(SQLFatParser.IN, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(SQLFatParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SQLFatParser.AND, 0)
        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SQLFatParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparasionPredicate" ):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparasionPredicate" ):
                listener.exitBinaryComparasionPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SQLFatParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SQLFatParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(SQLFatParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SQLFatParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.LOCAL_ID:
                self.state = 1050
                self.match(SQLFatParser.LOCAL_ID)
                self.state = 1051
                self.match(SQLFatParser.VAR_ASSIGN)


            self.state = 1054
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1086
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1084
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        localctx = SQLFatParser.BinaryComparasionPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1056
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1057
                        self.comparisonOperator()
                        self.state = 1058
                        localctx.right = self.predicate(4)
                        pass

                    elif la_ == 2:
                        localctx = SQLFatParser.BetweenPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1060
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLFatParser.NOT:
                            self.state = 1061
                            self.match(SQLFatParser.NOT)


                        self.state = 1064
                        self.match(SQLFatParser.BETWEEN)
                        self.state = 1065
                        self.predicate(0)
                        self.state = 1066
                        self.match(SQLFatParser.AND)
                        self.state = 1067
                        self.predicate(3)
                        pass

                    elif la_ == 3:
                        localctx = SQLFatParser.InPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1069
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLFatParser.NOT:
                            self.state = 1070
                            self.match(SQLFatParser.NOT)


                        self.state = 1073
                        self.match(SQLFatParser.IN)
                        self.state = 1074
                        self.match(SQLFatParser.LR_BRACKET)
                        self.state = 1077
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                        if la_ == 1:
                            self.state = 1075
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 1076
                            self.expressions()
                            pass


                        self.state = 1079
                        self.match(SQLFatParser.RR_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = SQLFatParser.IsNullPredicateContext(self, SQLFatParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1081
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1082
                        self.match(SQLFatParser.IS)
                        self.state = 1083
                        self.nullNotnull()
                        pass

             
                self.state = 1088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(SQLFatParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SQLFatParser.EXISTS, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SQLFatParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpessionAtom" ):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpessionAtom" ):
                listener.exitExistsExpessionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SQLFatParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SQLFatParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(SQLFatParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SQLFatParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SQLFatParser.ROW, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SQLFatParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(SQLFatParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLFatParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                localctx = SQLFatParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1090
                self.constant()
                pass

            elif la_ == 2:
                localctx = SQLFatParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1091
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = SQLFatParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1092
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = SQLFatParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1093
                self.unaryOperator()
                self.state = 1094
                self.expressionAtom(7)
                pass

            elif la_ == 5:
                localctx = SQLFatParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1096
                self.match(SQLFatParser.BINARY)
                self.state = 1097
                self.expressionAtom(6)
                pass

            elif la_ == 6:
                localctx = SQLFatParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1098
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1099
                self.expression(0)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 1100
                    self.match(SQLFatParser.COMMA)
                    self.state = 1101
                    self.expression(0)
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1107
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = SQLFatParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1109
                self.match(SQLFatParser.ROW)
                self.state = 1110
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1111
                self.expression(0)
                self.state = 1114 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1112
                    self.match(SQLFatParser.COMMA)
                    self.state = 1113
                    self.expression(0)
                    self.state = 1116 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLFatParser.COMMA):
                        break

                self.state = 1118
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = SQLFatParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1120
                self.match(SQLFatParser.EXISTS)
                self.state = 1121
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1122
                self.selectStatement()
                self.state = 1123
                self.match(SQLFatParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = SQLFatParser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1125
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1126
                self.selectStatement()
                self.state = 1127
                self.match(SQLFatParser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SQLFatParser.MathExpressionAtomContext(self, SQLFatParser.ExpressionAtomContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                    self.state = 1131
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1132
                    self.mathOperator()
                    self.state = 1133
                    localctx.right = self.expressionAtom(2) 
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = SQLFatParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__1) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3))) != 0) or _la==SQLFatParser.NOT or _la==SQLFatParser.EXCLAMATION_SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(SQLFatParser.AND, 0)

        def XOR(self):
            return self.getToken(SQLFatParser.XOR, 0)

        def OR(self):
            return self.getToken(SQLFatParser.OR, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = SQLFatParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_logicalOperator)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(SQLFatParser.AND)
                pass
            elif token in [SQLFatParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.match(SQLFatParser.T__4)
                self.state = 1144
                self.match(SQLFatParser.T__4)
                pass
            elif token in [SQLFatParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1145
                self.match(SQLFatParser.XOR)
                pass
            elif token in [SQLFatParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1146
                self.match(SQLFatParser.OR)
                pass
            elif token in [SQLFatParser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1147
                self.match(SQLFatParser.T__5)
                self.state = 1148
                self.match(SQLFatParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SQLFatParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comparisonOperator)
        try:
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1151
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1152
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1153
                self.match(SQLFatParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1154
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1155
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1156
                self.match(SQLFatParser.GREATER_SYMBOL)
                self.state = 1157
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1158
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1159
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1160
                self.match(SQLFatParser.EXCLAMATION_SYMBOL)
                self.state = 1161
                self.match(SQLFatParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1162
                self.match(SQLFatParser.LESS_SYMBOL)
                self.state = 1163
                self.match(SQLFatParser.EQUAL_SYMBOL)
                self.state = 1164
                self.match(SQLFatParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SQLFatParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = SQLFatParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.T__0) | (1 << SQLFatParser.T__2) | (1 << SQLFatParser.T__3) | (1 << SQLFatParser.T__6) | (1 << SQLFatParser.T__7) | (1 << SQLFatParser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(SQLFatParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = SQLFatParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assignmentField)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR, SQLFatParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1169
                self.uid()
                pass
            elif token in [SQLFatParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.match(SQLFatParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.DecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SQLFatParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(SQLFatParser.REAL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = SQLFatParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.stringLiteral()
                pass
            elif token in [SQLFatParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.decimalLiteral()
                pass
            elif token in [SQLFatParser.FALSE, SQLFatParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1175
                self.booleanLiteral()
                pass
            elif token in [SQLFatParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1176
                self.match(SQLFatParser.REAL_LITERAL)
                pass
            elif token in [SQLFatParser.NOT, SQLFatParser.NULL_LITERAL, SQLFatParser.NULL_SPEC_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLFatParser.NOT:
                    self.state = 1177
                    self.match(SQLFatParser.NOT)


                self.state = 1180
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.NULL_LITERAL or _la==SQLFatParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SQLFatParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SQLFatParser.NOT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = SQLFatParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLFatParser.NOT:
                self.state = 1183
                self.match(SQLFatParser.NOT)


            self.state = 1186
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.NULL_LITERAL or _la==SQLFatParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(SQLFatParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = SQLFatParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_decimalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(SQLFatParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SQLFatParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SQLFatParser.FALSE, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = SQLFatParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            _la = self._input.LA(1)
            if not(_la==SQLFatParser.FALSE or _la==SQLFatParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(SQLFatParser.DOT_ID, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = SQLFatParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.uid()
            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1193
                self.match(SQLFatParser.DOT_ID)

            elif la_ == 2:
                self.state = 1194
                self.match(SQLFatParser.DOT)
                self.state = 1195
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.DottedIdContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = SQLFatParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.uid()
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1199
                self.dottedId()
                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(SQLFatParser.FullIdContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = SQLFatParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(SQLFatParser.ID, 0)

        def dataTypeBase(self):
            return self.getTypedRuleContext(SQLFatParser.DataTypeBaseContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = SQLFatParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_uid)
        try:
            self.state = 1209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.match(SQLFatParser.ID)
                pass
            elif token in [SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.ENUM, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1208
                self.dataTypeBase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLFatParser.UidContext)
            else:
                return self.getTypedRuleContext(SQLFatParser.UidContext,i)


        def getRuleIndex(self):
            return SQLFatParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = SQLFatParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.uid()
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLFatParser.COMMA:
                self.state = 1212
                self.match(SQLFatParser.COMMA)
                self.state = 1213
                self.uid()
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(SQLFatParser.DATE, 0)

        def TIME(self):
            return self.getToken(SQLFatParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLFatParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SQLFatParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(SQLFatParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(SQLFatParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(SQLFatParser.TEXT, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = SQLFatParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.ENUM))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SQLFatParser.TEXT - 94)) | (1 << (SQLFatParser.TIME - 94)) | (1 << (SQLFatParser.TIMESTAMP - 94)) | (1 << (SQLFatParser.YEAR - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(SQLFatParser.DOT_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(SQLFatParser.UidContext,0)


        def getRuleIndex(self):
            return SQLFatParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = SQLFatParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dottedId)
        try:
            self.state = 1224
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.match(SQLFatParser.DOT_ID)
                pass
            elif token in [SQLFatParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1222
                self.match(SQLFatParser.DOT)
                self.state = 1223
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLFatParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SQLFatParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(SQLFatParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def CHAR(self):
            return self.getToken(SQLFatParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(SQLFatParser.VARCHAR, 0)

        def TEXT(self):
            return self.getToken(SQLFatParser.TEXT, 0)

        def TINYINT(self):
            return self.getToken(SQLFatParser.TINYINT, 0)

        def INT(self):
            return self.getToken(SQLFatParser.INT, 0)

        def BIGINT(self):
            return self.getToken(SQLFatParser.BIGINT, 0)

        def REAL(self):
            return self.getToken(SQLFatParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(SQLFatParser.DOUBLE, 0)

        def FLOAT(self):
            return self.getToken(SQLFatParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(SQLFatParser.DECIMAL, 0)

        def NUMERIC(self):
            return self.getToken(SQLFatParser.NUMERIC, 0)

        def DATE(self):
            return self.getToken(SQLFatParser.DATE, 0)

        def BLOB(self):
            return self.getToken(SQLFatParser.BLOB, 0)

        def BOOL(self):
            return self.getToken(SQLFatParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(SQLFatParser.BOOLEAN, 0)

        def BIT(self):
            return self.getToken(SQLFatParser.BIT, 0)

        def TIME(self):
            return self.getToken(SQLFatParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SQLFatParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SQLFatParser.DATETIME, 0)

        def BINARY(self):
            return self.getToken(SQLFatParser.BINARY, 0)

        def VARBINARY(self):
            return self.getToken(SQLFatParser.VARBINARY, 0)

        def YEAR(self):
            return self.getToken(SQLFatParser.YEAR, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLFatParser.STRING_LITERAL)
            else:
                return self.getToken(SQLFatParser.STRING_LITERAL, i)

        def ENUM(self):
            return self.getToken(SQLFatParser.ENUM, 0)

        def SET(self):
            return self.getToken(SQLFatParser.SET, 0)

        def getRuleIndex(self):
            return SQLFatParser.RULE_dataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataType" ):
                listener.enterDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataType" ):
                listener.exitDataType(self)




    def dataType(self):

        localctx = SQLFatParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLFatParser.BIGINT, SQLFatParser.BINARY, SQLFatParser.BIT, SQLFatParser.BLOB, SQLFatParser.BOOL, SQLFatParser.BOOLEAN, SQLFatParser.CHAR, SQLFatParser.DATE, SQLFatParser.DATETIME, SQLFatParser.DECIMAL, SQLFatParser.DOUBLE, SQLFatParser.FLOAT, SQLFatParser.INT, SQLFatParser.NUMERIC, SQLFatParser.REAL, SQLFatParser.TEXT, SQLFatParser.TIME, SQLFatParser.TIMESTAMP, SQLFatParser.TINYINT, SQLFatParser.VARCHAR, SQLFatParser.VARBINARY, SQLFatParser.YEAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLFatParser.BIGINT) | (1 << SQLFatParser.BINARY) | (1 << SQLFatParser.BIT) | (1 << SQLFatParser.BLOB) | (1 << SQLFatParser.BOOL) | (1 << SQLFatParser.BOOLEAN) | (1 << SQLFatParser.CHAR) | (1 << SQLFatParser.DATE) | (1 << SQLFatParser.DATETIME) | (1 << SQLFatParser.DECIMAL) | (1 << SQLFatParser.DOUBLE) | (1 << SQLFatParser.FLOAT) | (1 << SQLFatParser.INT))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLFatParser.NUMERIC - 74)) | (1 << (SQLFatParser.REAL - 74)) | (1 << (SQLFatParser.TEXT - 74)) | (1 << (SQLFatParser.TIME - 74)) | (1 << (SQLFatParser.TIMESTAMP - 74)) | (1 << (SQLFatParser.TINYINT - 74)) | (1 << (SQLFatParser.VARCHAR - 74)) | (1 << (SQLFatParser.VARBINARY - 74)) | (1 << (SQLFatParser.YEAR - 74)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SQLFatParser.ENUM, SQLFatParser.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SQLFatParser.ENUM or _la==SQLFatParser.SET):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1230
                self.match(SQLFatParser.LR_BRACKET)
                self.state = 1231
                self.match(SQLFatParser.STRING_LITERAL)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLFatParser.COMMA:
                    self.state = 1232
                    self.match(SQLFatParser.COMMA)
                    self.state = 1233
                    self.match(SQLFatParser.STRING_LITERAL)
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1239
                self.match(SQLFatParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[57] = self.expression_sempred
        self._predicates[61] = self.predicate_sempred
        self._predicates[62] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




